//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ke2400DotNetWrapper
{
    using System;
    using System.Runtime.InteropServices;


    public class ke2400 : object, System.IDisposable
    {

        private System.IntPtr _handle;

        private bool _disposed = true;

        ~ke2400() { Dispose(false); }


        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver session.
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the KE2400_LockSession and KE2400_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// GPIB[board]::&lt;primary address&gt;[::secondary address]::INSTR
        /// VXI[board]::&lt;logical address&gt;::INSTR
        /// GPIB-VXI[board]::&lt;logical address&gt;::INSTR
        /// ASRL&lt;port&gt;::INSTR
        /// &lt;LogicalName&gt;
        /// [VInstr-&gt;]&lt;VirtualInstrument&gt;
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// board - 0
        /// secondary address - none (31)
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
        ///                     secondary address
        /// "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
        ///                        secondary address 5
        /// "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
        ///                         secondary address 5
        /// "VXI::64::INSTR" - VXI board 0, logical address 64
        /// "VXI1::64::INSTR" - VXI board 1, logical address 64
        /// "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64
        /// "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64
        /// "ASRL2::INSTR" - COM port 2
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "VInstr-&gt;xyz432" - Virtual Instrument "xyz432"
        /// "xyz432" - Logical Name or Virtual Instrument "xyz432"
        /// 
        /// 
        /// Default Value:  "GPIB::24::INSTR"
        /// 
        /// Note: You specify the resource name with the "VInstr-&gt;" if you have the logical name that is the same as the virtual instrument name and you want to explicitly use the virtual instrument name. Otherwise, the driver uses the logical name.
        /// 
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// 
        /// </param>
        /// <param name="Instrument_Handle">
        /// Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Notes:
        /// 
        /// (1) This function creates a new session each time you invoke it.  This is useful if you have multiple physical instances of the same type of instrument.  
        /// 
        /// (2) Avoid creating multiple concurrent sessions to the same physical instrument.  Although you can create more than one IVI session for the same resource, it is best not to do so.  A better approach is to use the same IVI session in multiple execution threads.  You can use functions KE2400_LockSession and KE2400_UnlockSession to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </param>
        public ke2400(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver and optionally sets the initial state of the following session attributes:
        /// 
        ///     KE2400_ATTR_RANGE_CHECK         
        ///     KE2400_ATTR_QUERY_INSTR_STATUS  
        ///     KE2400_ATTR_CACHE               
        ///     KE2400_ATTR_SIMULATE            
        ///     KE2400_ATTR_RECORD_COERCIONS    
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the KE2400_LockSession and KE2400_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// GPIB[board]::&lt;primary address&gt;[::secondary address]::INSTR
        /// VXI[board]::&lt;logical address&gt;::INSTR
        /// GPIB-VXI[board]::&lt;logical address&gt;::INSTR
        /// ASRL&lt;port&gt;::INSTR
        /// &lt;LogicalName&gt;
        /// [VInstr-&gt;]&lt;VirtualInstrument&gt;
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// board - 0
        /// secondary address - none (31)
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
        ///                     secondary address
        /// "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
        ///                        secondary address 5
        /// "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
        ///                         secondary address 5
        /// "VXI::64::INSTR" - VXI board 0, logical address 64
        /// "VXI1::64::INSTR" - VXI board 1, logical address 64
        /// "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64
        /// "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64
        /// "ASRL2::INSTR" - COM port 2
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "VInstr-&gt;xyz432" - Virtual Instrument "xyz432"
        /// "xyz432" - Logical Name or Virtual Instrument "xyz432"
        /// 
        /// 
        /// Default Value:  "GPIB::24::INSTR"
        /// 
        /// Note: You specify the resource name with the "VInstr-&gt;" if you have the logical name that is the same as the virtual instrument name and you want to explicitly use the virtual instrument name. Otherwise, the driver uses the logical name.
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// 
        /// </param>
        /// <param name="Option_String">
        /// You can use this control to set the initial value of certain attributes for the session.  The following table lists the attributes and the name you use in this parameter to identify the attribute.
        /// 
        /// Name              Attribute Defined Constant   
        /// --------------------------------------------
        /// RangeCheck        KE2400_ATTR_RANGE_CHECK
        /// QueryInstrStatus  KE2400_ATTR_QUERY_INSTR_STATUS   
        /// Cache             KE2400_ATTR_CACHE   
        /// Simulate          KE2400_ATTR_SIMULATE  
        /// RecordCoercions   KE2400_ATTR_RECORD_COERCIONS
        /// 
        /// The format of this string is, "AttributeName=Value" where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.
        /// 
        /// If you pass NULL or an empty string for this parameter and a VISA resource descriptor for the Resource Name parameter, the session uses the default values for the attributes. The default values for the attributes are shown below:
        /// 
        ///     Attribute Name     Default Value
        ///     ----------------   -------------
        ///     RangeCheck         VI_TRUE
        ///     QueryInstrStatus   VI_TRUE
        ///     Cache              VI_TRUE
        ///     Simulate           VI_FALSE
        ///     RecordCoercions    VI_FALSE
        ///     
        /// 
        /// If you pass NULL or an empty string for this parameter and a virtual instrument or logical name for the Resource Name parameter, the session uses the values that you configure for virtual instrument or logical name with the IVI Configuration utility.
        /// 
        /// You can override the values of the attributes by assigning a value explicitly in a string you pass for this parameter.  You do not have to specify all of the attributes and may leave any of them out.  If you do not specify one of the attributes, its default value or the value that you configure with the IVI Configuration utility will be used.
        /// 
        /// The following are the valid values for ViBoolean attributes:
        /// 
        ///     True:     1, TRUE, or VI_TRUE
        ///     False:    0, False, or VI_FALSE
        /// 
        /// 
        /// Default Value:
        /// "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1"
        /// 
        /// </param>
        /// <param name="Instrument_Handle">
        /// Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Notes:
        /// 
        /// (1) This function creates a new session each time you invoke it.  This is useful if you have multiple physical instances of the same type of instrument.  
        /// 
        /// (2) Avoid creating multiple concurrent sessions to the same physical instrument.  Although you can create more than one IVI session for the same resource, it is best not to do so.  A better approach is to use the same IVI session in multiple execution threads.  You can use functions KE2400_LockSession and KE2400_UnlockSession to protect sections of code that require exclusive access to the resource.
        /// 
        /// 
        /// </param>
        public ke2400(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function configures the common attributes of the SourceMeter.  These attributes include the measurement function, maximum range, and the absolute resolution.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Measurement_Function">
        /// Pass the measurement function you want the SourceMeter to perform.  The driver sets the KE2400_ATTR_FUNCTION attribute to this value. 
        /// 
        /// Valid Values:
        /// KE2400_VAL_DC_VOLTS               - DC Volts 
        /// KE2400_VAL_DC_CURRENT(Default)    - DC Current
        /// KE2400_VAL_2_WIRE_RES             - 2-Wire Resistance
        /// KE2400_VAL_4_WIRE_RES             - 4-Wire Resistance
        /// KE2400_VAL_2_WIRE_RES_OFFSET_COMP - 2-Wire Resistance 
        ///                                     Offset Compensated
        /// KE2400_VAL_4_WIRE_RES_OFFSET_COMP - 4-Wire Resistance
        ///                                     Offset Compensated
        ///  
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// Pass the measurement range you want to use.  The driver sets the KE2400_ATTR_RANGE attribute to this value.  
        /// 
        /// Use positive values to represent the absolute value of the maximum expected measurement.  The value must be in units appropriate for the Measurement Function.  For example, when you set the Measurement Function to KE2400_VAL_DC_VOLTS, you must specify the Range in volts.  Setting this parameter to 10.0 configures the SourceMeter to measure DC voltages from -10.0 to +10.0 volts.
        /// 
        /// The driver reserves special negative values for controlling the SourceMeter's auto-ranging capability.
        /// 
        /// Defined Values:
        /// KE2400_VAL_AUTO_RANGE_ON  (-1.0) - Auto-range On
        /// KE2400_VAL_AUTO_RANGE_OFF (-2.0) - Auto-range Off
        /// 
        /// Valid Manual Range:  The valid manual range depends on the value you pass for the Measurement Function parameter and the specific instrument model.
        /// 
        ///              2400   2410   2420   2425/30  2440
        /// 
        /// - DC Volts:  200mV  200mV  200mV  200mV  200mV
        ///                 2V     2V     2V     2V     2V
        ///                20V    20V    20V    20V    20V
        ///               200V  1000V    60V   100V    40V
        /// 
        /// - DC Current:  1uA    1uA    -      -       -
        ///               10uA   10uA   10uA   10uA    10uA
        ///              100uA  100uA  100uA  100uA   100uA
        ///                1mA    1mA    1mA    1mA     1mA
        ///               10mA   10mA   10mA   10mA    10mA
        ///              100mA  100mA  100mA  100mA   100mA
        ///                 1A     1A     1A     1A      1A
        ///                 -      -      3A  3A/10A     5A
        /// 
        /// All Models
        /// - Resistance (Ohms): 2, 20, 200, 2K, 20K, 2M, 20M, 200M 
        /// 
        /// Default Value:
        /// KE2400_VAL_AUTO_RANGE_ON (-1.0)
        /// 
        /// Notes:
        /// 
        /// (1) Setting this parameter KE2400_VAL_AUTO_RANGE_OFF configures the SourceMeter to stop auto-ranging and keep the range fixed at the current maximum range.
        /// 
        /// </param>
        /// <param name="Resolution__absolute_">
        /// Pass your desired measurement resolution in absolute units.  The driver sets the KE2400_ATTR_RESOLUTION_ABSOLUTE attribute to this value.
        /// 
        /// Setting this parameter to lower values increases the measurement accuracy.  Setting this parameter to higher values increases the measurement speed.      
        /// 
        /// The value must be in units appropriate for the Measurement Function as shown in the following table. 
        /// 
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        ///   
        /// Valid Range:  
        /// 
        /// The valid range depends on the current measurement function and the current measurement range that you select with the KE2400_ATTR_FUNCTION and the KE2400_ATTR_RANGE attributes. The table below shows the minimum and maximum resolution values for each measurement type. The minimum resolution values are based on the maximum possible range for that measurement function. The maximum resolution values are based on the minimum possible range. 
        /// 
        /// 
        ///  --------------------------------------------------------------
        ///  |    Function    | Min Resolution|  Max Resolution   | Unit  |      
        ///  --------------------------------------------------------------
        ///  | DC Volts       |  1            |  1E-7             | volts |
        ///  | DC Current     |  0.001        |  1E-8             | amps  |
        ///  | 2-Wire Res     |  10000        |  1E-4             | ohms  |
        ///  | 4-Wire Res     |  10000        |  1E-4             | ohms  |
        ///  --------------------------------------------------------------
        /// 
        /// Default Value: 0.0001 Volts
        /// 
        /// Notes:
        /// 
        /// (1) This parameter is ignored if the 'Range' parameter is set to KE2700_VAL_AUTO_RANGE_ON.
        /// 
        /// (2) The driver converts resolution into instrument digits using the following equation:
        /// 
        ///   digits = log10(range/resolution),
        /// 
        /// where range is the measurement range for the selected function.
        /// 
        /// The driver always coerces digits to a value between 4 and 7.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureMeasurement(int Measurement_Function, double Range, double Resolution__absolute_)
        {
            int pInvokeResult = PInvoke.ConfigureMeasurement(this._handle, Measurement_Function, Range, Resolution__absolute_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the integration time, or aperture, of the instrument. The function sets the attributes KE2400_ATTR_APERTURE_TIME and KE2400_ATTR_APERTURE_TIME_UNITS. 
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Aperture_Time">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <param name="Aperture_Time_Unit">
        /// This function configures the integration time, or aperture, of the A/D converter for the current measurement function. The function sets the attributes KE2400_ATTR_APERTURE_TIME and KE2400_ATTR_APERTURE_TIME_UNITS. 
        /// 
        /// 2400 Series instruments only support the power-line cycle unit. 
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureApertureTimeInfo(double Aperture_Time, int Aperture_Time_Unit)
        {
            int pInvokeResult = PInvoke.ConfigureApertureTimeInfo(this._handle, Aperture_Time, Aperture_Time_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure DC voltage measurements
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Range">
        /// Sets the DC Volt measurement range to the smallest +/- range that includes the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        ///     
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Volts:  200mV  200mV  200mV  200mV  200mV
        ///                 2V     2V     2V     2V     2V
        ///                20V    20V    20V    20V    20V
        ///               200V  1000V    60V   100V    40V
        /// 
        /// Valid Range:  0-200 0-1000   0-60  0-100   0-40
        /// 
        /// 
        /// </param>
        /// <param name="NPLC">
        /// Set integration rate in power line cycles.
        /// 
        /// Valid Values:
        ///        0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///        KE2400_VAL_RATE_FAST        -  0.01 PLC 
        ///        KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 
        ///        KE2400_VAL_RATE_NORMAL      -  1.0  PLC 
        ///        KE2400_VAL_RATE_HI_ACCURACY -  10.0 PLC 
        /// </param>
        /// <param name="Guard">
        /// Enable or disable driven guard
        /// 
        /// Valid Vaue: VI_TRUE
        /// 
        /// Note: 
        ///     This parameter has been kept for compatibility only. On 2400 Series instruments, guard is always enabled.
        /// 
        /// </param>
        /// <param name="External_Feedback">
        /// Enable or disable external feedback
        /// 
        /// Valid Vaue: VI_FALSE
        /// 
        /// Note: 
        ///     This parameter has been kept for compatibility only. On 2400 Series instruments, external feedback is always disabled.
        /// 
        /// </param>
        /// <param name="Autorange">
        /// Enable or disable auto range
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDCVSense(double Range, double NPLC, bool Guard, bool External_Feedback, bool Autorange)
        {
            int pInvokeResult = PInvoke.ConfigureDCVSense(this._handle, Range, NPLC, System.Convert.ToUInt16(Guard), System.Convert.ToUInt16(External_Feedback), System.Convert.ToUInt16(Autorange));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure DC current measurements.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Range">
        /// Set the DC Current measurement range to the smallest +/- range that include the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Current:  1uA    1uA    -      -       -
        ///               10uA   10uA   10uA   10uA    10uA
        ///              100uA  100uA  100uA  100uA   100uA
        ///                1mA    1mA    1mA    1mA     1mA
        ///               10mA   10mA   10mA   10mA    10mA
        ///              100mA  100mA  100mA  100mA   100mA
        ///                 1A     1A     1A     1A      1A
        ///                 -      -      3A  3A/10A     5A
        /// 
        /// Valid Range: 0-1     0-1    0-3    0-10     0-5
        /// 
        /// 
        /// 
        /// </param>
        /// <param name="NPLC">
        /// Set integration rate in power line cycles.
        /// 
        /// Valid Values:
        ///        0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///        KE2400_VAL_RATE_FAST        -  0.01 PLC 
        ///        KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 
        ///        KE2400_VAL_RATE_NORMAL      -  1.0  PLC 
        ///        KE2400_VAL_RATE_HI_ACCURACY -  10.0 PLC 
        /// </param>
        /// <param name="Autorange">
        /// Enable or disable auto range
        /// </param>
        /// <param name="Damping">
        /// Enable or disable the current damping.
        /// 
        /// Valid Vaue: VI_FALSE
        /// 
        /// Note: 
        ///     This parameter has been kept for compatibility only. On 2400 Series instruments, current damping is always disabled.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDCISense(double Range, double NPLC, bool Autorange, bool Damping)
        {
            int pInvokeResult = PInvoke.ConfigureDCISense(this._handle, Range, NPLC, System.Convert.ToUInt16(Autorange), System.Convert.ToUInt16(Damping));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure 2 wire resistance measurements
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Range">
        /// Set the Resistance measurement range to the smallest range that includes the specified value.
        /// 
        /// Valid values: 
        ///     0 to 2.1E11
        /// 
        /// All Models
        /// - Resistance (Ohms): 2, 20, 200, 2K, 20K, 2M, 20M, 200M 
        /// 
        /// </param>
        /// <param name="NPLC">
        /// Set integration rate in power line cycles.
        /// 
        /// Valid Values:
        ///        0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///        KE2400_VAL_RATE_FAST        -  0.01 PLC 
        ///        KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 
        ///        KE2400_VAL_RATE_NORMAL      -  1.0  PLC 
        ///        KE2400_VAL_RATE_HI_ACCURACY -  10.0 PLC 
        /// </param>
        /// <param name="Guard">
        /// Enable or disable driven guard
        /// 
        /// Valid Vaue: VI_TRUE
        /// 
        /// Note: 
        ///     This parameter has been kept for compatibility only. On 2400 Series instruments, guard is always enabled.
        /// 
        /// </param>
        /// <param name="Autorange">
        /// Enable or disable auto range
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureRESSense(double Range, double NPLC, bool Guard, bool Autorange)
        {
            int pInvokeResult = PInvoke.ConfigureRESSense(this._handle, Range, NPLC, System.Convert.ToUInt16(Guard), System.Convert.ToUInt16(Autorange));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a single-point voltage measurement with a DC current source. This function sets trigger sources to IMMEDIATE and 
        /// trigger counts to 1.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceDC and related functions.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Source_Range">
        /// Pass the output range you want to use for the source. 
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///      0.0      to   1.05e-6 
        ///      1.05e-6  to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///       0.0     to   1.05e-6     
        ///       1.05e-6 to  10.5e-6      
        ///      10.5e-6  to 105.0e-6      
        ///     105.0e-6  to   1.05e-3     
        ///       1.05e-3 to  21.0e-3      
        ///      21.0e-3  to 105.0e-3      
        ///     105.0e-3  to   1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///       0.0     to  10.5e-6 
        ///      10.5e-6  to 105.0e-6 
        ///     105.0e-6  to   1.05e-3
        ///       1.05e-3 to  10.5e-3 
        ///      10.5e-3  to 105.0e-3 
        ///     105.0e-3  to   1.05   
        ///       1.05    to   3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to  10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to   5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///       0.0      to   1.05e-12     
        ///       1.05e-12 to   10.5e-12     
        ///      10.5e-12  to  105.0e-12     
        ///     105.0e-12  to    1.05e-9     
        ///       1.05e-9  to  10.5e-9       
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Source_Level">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///     +/- 1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///     +/-1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///     +/-3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///     +/-10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///     +/-5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///     +/-10.5e-9       
        /// 
        /// </param>
        /// <param name="Sense_Range">
        /// Sets the DC Volt measurement range to the smallest +/- range that includes the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        ///     
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Volts:  200mV  200mV  200mV  200mV  200mV
        ///                 2V     2V     2V     2V     2V
        ///                20V    20V    20V    20V    20V
        ///               200V  1000V    60V   100V    40V
        /// 
        /// Valid Range:  0-200 0-1000   0-60  0-100   0-40
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_DC_IV(double Source_Range, double Source_Compliance, double Source_Level, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_DC_IV(this._handle, Source_Range, Source_Compliance, Source_Level, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a single-point current measurement with a DC voltage source. This function sets trigger sources to IMMEDIATE and 
        /// trigger counts to 1.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceDC and related functions.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Source_Range">
        /// Pass the output range you want to use for the DC source. 
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to   1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to  63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  10.5                  
        ///      10.5    to  42.0                  
        ///                                        
        ///      
        /// 
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Source_Protection">
        /// Pass the absolute value of the overvoltage protection limit for the voltage source.  
        /// 
        /// Valid values (Model 2400, Model 6430): 
        ///     20V, 40V, 60V, 80V, 100V, 120V, 160V, &gt;160V (NONE)
        /// 
        /// Valid values (Model 2410):
        ///    20V, 40V, 100V, 200V, 300V, 400V, 500V, &gt;500V (NONE) 
        /// 
        /// Valid values (Model 2420):
        ///     6V, 12V, 18V, 24V, 30V, 36V, 48V, &gt;48V (NONE) 
        /// 
        /// Valid values (Model 2425, Model 2430):
        ///     10V, 20V, 30V, 40V, 50V, 60V, 80V, &gt;80V (NONE) 
        /// 
        /// Valid values (Model 2440):
        ///     4V, 8V, 12V, 16V, 20V, 24V, 32V, &gt;40V (NONE) 
        /// 
        /// 
        /// </param>
        /// <param name="Source_Level">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///      +/-210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///      +/-1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///      +/-63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///      +/-105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///      +/-42.0                                                        
        ///      
        /// </param>
        /// <param name="Sense_Range">
        /// Set the DC Current measurement range to the smallest +/- range that include the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Current:  1uA    1uA    -      -       -
        ///               10uA   10uA   10uA   10uA    10uA
        ///              100uA  100uA  100uA  100uA   100uA
        ///                1mA    1mA    1mA    1mA     1mA
        ///               10mA   10mA   10mA   10mA    10mA
        ///              100mA  100mA  100mA  100mA   100mA
        ///                 1A     1A     1A     1A      1A
        ///                 -      -      3A  3A/10A     5A
        /// 
        /// Valid Range: 0-1     0-1    0-3    0-10     0-5
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_DC_VI(double Source_Range, double Source_Compliance, double Source_Protection, double Source_Level, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_DC_VI(this._handle, Source_Range, Source_Compliance, Source_Protection, Source_Level, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a multipoint voltage measurement with a ramped current source. This function sets trigger sources to IMMEDIATE and trigger counts to the number of points. It also sets the source ranging to auto.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceRamp and related functions.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Ranging">
        /// Set the ranging mode for the source. The ranging mode determines how when the instrument automatically changes the source range.
        /// 
        /// Valid Values:
        ///     KE2400_VAL_SWEEP_RANGE_BEST        Once
        ///     KE2400_VAL_SWEEP_RANGE_AUTO        Upon each source change
        ///     KE2400_VAL_SWEEP_RANGE_FIXED       Never
        /// 
        /// </param>
        /// <param name="Spacing">
        /// Pass the spacing mode for the ramp. The spacing mode determines how the ramp source values change from point to point.
        /// 
        /// Valid values:
        ///     KE2400_VAL_LINEAR
        ///     KE2400_VAL_LOG
        /// 
        /// </param>
        /// <param name="Direction">
        /// Pass the direction for the ramp. The direction determines how the ramp source levels go from start to stop or from stop to start.
        /// 
        /// Valid values:
        ///     KE2400_VAL_SWEEP_DIR_UP     Start to Stop
        ///     KE2400_VAL_SWEEP_DIR_DOWN   Stop to Start
        /// 
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Start">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///     +/- 1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///     +/-1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///     +/-3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///     +/-10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///     +/-5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///     +/-10.5e-9       
        /// 
        /// </param>
        /// <param name="Stop">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///     +/- 1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///     +/-1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///     +/-3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///     +/-10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///     +/-5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///     +/-10.5e-9       
        /// 
        /// </param>
        /// <param name="Number_of_Points">
        /// Pass the number of points on the ramp. 
        /// 
        /// Valid range:
        ///     2 to 2500
        /// 
        /// </param>
        /// <param name="Sense_Range">
        /// Sets the DC Volt measurement range to the smallest +/- range that includes the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        ///     
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Volts:  200mV  200mV  200mV  200mV  200mV
        ///                 2V     2V     2V     2V     2V
        ///                20V    20V    20V    20V    20V
        ///               200V  1000V    60V   100V    40V
        /// 
        /// Valid Range:  0-200 0-1000   0-60  0-100   0-40
        /// 
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_Sweep_IV(int Ranging, int Spacing, int Direction, double Source_Compliance, double Start, double Stop, int Number_of_Points, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_Sweep_IV(this._handle, Ranging, Spacing, Direction, Source_Compliance, Start, Stop, Number_of_Points, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a multipoint current measurement with a ramped voltage source. This function sets trigger sources to IMMEDIATE and trigger counts to the number of points. It also sets the source ranging to auto.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceRamp and related functions.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Ranging">
        /// Set the ranging mode for the source. The ranging mode determines how when the instrument automatically changes the source range.
        /// 
        /// Valid Values:
        ///     KE2400_VAL_SWEEP_RANGE_BEST        Once
        ///     KE2400_VAL_SWEEP_RANGE_AUTO        Upon each source change
        ///     KE2400_VAL_SWEEP_RANGE_FIXED       Never
        /// 
        /// </param>
        /// <param name="Spacing">
        /// Pass the spacing mode for the ramp. The spacing mode determines how the ramp source values change from point to point.
        /// 
        /// Valid values:
        ///     KE2400_VAL_LINEAR
        ///     KE2400_VAL_LOG
        /// 
        /// </param>
        /// <param name="Direction">
        /// Pass the direction for the ramp. The direction determines how the ramp source levels go from start to stop or from stop to start.
        /// 
        /// Valid values:
        ///     KE2400_VAL_SWEEP_DIR_UP     Start to Stop
        ///     KE2400_VAL_SWEEP_DIR_DOWN   Stop to Start
        /// 
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Source_Protection">
        /// Pass the absolute value of the overvoltage protection limit for the voltage source.  
        /// 
        /// Valid values (Model 2400, Model 6430): 
        ///     20V, 40V, 60V, 80V, 100V, 120V, 160V, &gt;160V (NONE)
        /// 
        /// Valid values (Model 2410):
        ///    20V, 40V, 100V, 200V, 300V, 400V, 500V, &gt;500V (NONE) 
        /// 
        /// Valid values (Model 2420):
        ///     6V, 12V, 18V, 24V, 30V, 36V, 48V, &gt;48V (NONE) 
        /// 
        /// Valid values (Model 2425, Model 2430):
        ///     10V, 20V, 30V, 40V, 50V, 60V, 80V, &gt;80V (NONE) 
        /// 
        /// Valid values (Model 2440):
        ///     4V, 8V, 12V, 16V, 20V, 24V, 32V, &gt;40V (NONE) 
        /// 
        /// 
        /// </param>
        /// <param name="Start">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///      +/-210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///      +/-1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///      +/-63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///      +/-105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///      +/-42.0                                                        
        /// 
        /// </param>
        /// <param name="Stop">
        /// Pass the output level you want to use for the source. The source range limits the allowable magnitude.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///      +/-210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///      +/-1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///      +/-63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///      +/-105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///      +/-42.0                                                        
        /// 
        /// </param>
        /// <param name="Number_of_Points">
        /// Pass the number of points on the ramp. 
        /// 
        /// Valid range:
        ///     2 to 2500
        /// 
        /// </param>
        /// <param name="Sense_Range">
        /// Set the DC Current measurement range to the smallest +/- range that include the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Current:  1uA    1uA    -      -       -
        ///               10uA   10uA   10uA   10uA    10uA
        ///              100uA  100uA  100uA  100uA   100uA
        ///                1mA    1mA    1mA    1mA     1mA
        ///               10mA   10mA   10mA   10mA    10mA
        ///              100mA  100mA  100mA  100mA   100mA
        ///                 1A     1A     1A     1A      1A
        ///                 -      -      3A  3A/10A     5A
        /// 
        /// Valid Range: 0-1     0-1    0-3    0-10     0-5
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_Sweep_VI(int Ranging, int Spacing, int Direction, double Source_Compliance, double Source_Protection, double Start, double Stop, int Number_of_Points, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_Sweep_VI(this._handle, Ranging, Spacing, Direction, Source_Compliance, Source_Protection, Start, Stop, Number_of_Points, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a multipoint voltage measurement with a custom list of current source values. This function sets trigger sources to IMMEDIATE and trigger counts to the number of points. It also sets the source ranging to auto.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceCustom and related functions.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Number_Of_Points">
        /// Pass the number of points in the list. 
        /// 
        /// Valid range:
        ///     1 to 100
        /// 
        /// </param>
        /// <param name="Values">
        /// Pass the output levels you want to use for the source.
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///     +/- 1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///     +/-1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///     +/-3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///     +/-10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///     +/-5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///     +/-10.5e-9       
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Sense_Range">
        /// Sets the DC Volt measurement range to the smallest +/- range that includes the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        ///     
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Volts:  200mV  200mV  200mV  200mV  200mV
        ///                 2V     2V     2V     2V     2V
        ///                20V    20V    20V    20V    20V
        ///               200V  1000V    60V   100V    40V
        /// 
        /// Valid Range:  0-200 0-1000   0-60  0-100   0-40
        /// 
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_List_IV(int Number_Of_Points, double[] Values, double Source_Compliance, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_List_IV(this._handle, Number_Of_Points, Values, Source_Compliance, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set up a multipoint current measurement with a custom list of voltage source values. This function sets trigger sources to IMMEDIATE and trigger counts to the number of points. It also sets the source ranging to auto.
        /// 
        /// This function is a 2400 Series-specific function. For portability, use KE2400_ConfigureMeasurement, KE2400_ConfigureSourceCustom and related functions.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Number_Of_Points">
        /// Pass the number of points in the list. 
        /// 
        /// Valid range:
        ///     1 to 100
        /// 
        /// </param>
        /// <param name="Values">
        /// Pass the output levels you want to use for the source.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///      +/-210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///      +/-1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///      +/-63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///      +/-105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///      +/-42.0                                                        
        /// 
        /// </param>
        /// <param name="Source_Compliance">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the Sense Range parameter.)
        /// </param>
        /// <param name="Source_Protection">
        /// Pass the absolute value of the overvoltage protection limit for the voltage source.  
        /// 
        /// Valid values (Model 2400, Model 6430): 
        ///     20V, 40V, 60V, 80V, 100V, 120V, 160V, &gt;160V (NONE)
        /// 
        /// Valid values (Model 2410):
        ///    20V, 40V, 100V, 200V, 300V, 400V, 500V, &gt;500V (NONE) 
        /// 
        /// Valid values (Model 2420):
        ///     6V, 12V, 18V, 24V, 30V, 36V, 48V, &gt;48V (NONE) 
        /// 
        /// Valid values (Model 2425, Model 2430):
        ///     10V, 20V, 30V, 40V, 50V, 60V, 80V, &gt;80V (NONE) 
        /// 
        /// Valid values (Model 2440):
        ///     4V, 8V, 12V, 16V, 20V, 24V, 32V, &gt;40V (NONE) 
        /// 
        /// 
        /// </param>
        /// <param name="Sense_Range">
        /// Set the DC Current measurement range to the smallest +/- range that include the specified value.
        /// 
        /// Valid Manual Range:  The valid manual range depends on the specific instrument model. The driver will coerce up the value to a correct range.    
        /// 
        ///   Model      2400   2410   2420   2425/30  2440
        /// 
        /// - DC Current:  1uA    1uA    -      -       -
        ///               10uA   10uA   10uA   10uA    10uA
        ///              100uA  100uA  100uA  100uA   100uA
        ///                1mA    1mA    1mA    1mA     1mA
        ///               10mA   10mA   10mA   10mA    10mA
        ///              100mA  100mA  100mA  100mA   100mA
        ///                 1A     1A     1A     1A      1A
        ///                 -      -      3A  3A/10A     5A
        /// 
        /// Valid Range: 0-1     0-1    0-3    0-10     0-5
        /// 
        /// 
        /// </param>
        /// <param name="Speed">
        /// Specifies the integration rate to be used. The driver sets the KE2400_ATTR_APERTURE_TIME attribute to this value.
        /// 
        /// The units of this value depend on the value of the Aperture Time Unit argument.
        /// 
        /// Valid Values:
        /// 0.01 to 10.0 Power Line Cycles (PLC)
        ///  
        /// Or use a symbolic value: 
        ///  KE2400_VAL_RATE_FAST        -  0.01 PLC 3.5 digits
        ///  KE2400_VAL_RATE_MEDIUM      -  0.1  PLC 4.5 digits
        ///  KE2400_VAL_RATE_NORMAL      -  1.0  PLC 5.5 digits
        ///  KE2400_VAL_RATE_HI_ACCURACY - 10.0  PLC 6.5 Digits.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported - VI_WARN_NSUP_ID_QUERY   
        /// 3FFC0102  Reset not supported - VI_WARN_NSUP_RESET      
        /// 3FFC0103  Self Test not supported - VI_WARN_NSUP_SELF_TEST  
        /// 3FFC0104  Error Query not supported - VI_WARN_NSUP_ERROR_QUERY
        /// 3FFC0105  Revision Query not supported - VI_WARN_NSUP_REV_QUERY  
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0001  Parameter 1 out of range. (String not range checked)
        /// BFFC0002  Parameter 2 (ID Query) out of range.
        /// BFFC0003  Parameter 3 (Reset Device) out of range.
        /// BFFC0004  Parameter 4 out of range.
        /// BFFC0005  Parameter 5 out of range.
        /// BFFC0006  Parameter 6 out of range.
        /// BFFC0007  Parameter 7 out of range.
        /// BFFC0008  Parameter 8 out of range.
        /// BFFC0011  Instrument returned invalid response to ID Query
        /// 
        /// BFFC0800  Error Opening File      VI_ERROR_INSTR_FILE_OPEN
        /// BFFC0801  Error Writing to File   VI_ERROR_INSTR_FILE_WRITE
        /// BFFC0803  Invalid Response VI_ERROR_INSTR_INTERPRETING_RESPONSE
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// 
        /// Driver Specific Errors:
        /// 
        /// BFFC1900  Device Error.
        /// BFFC1901  Cannot select more than one sense function with a
        ///           2430 in pulse mode.                 
        /// BFFC1902  Cannot select this output off mode with a 2430 in
        ///           pulse mode.
        /// BFFC1903  Device not supported.
        /// BFFC1904  Unsupported Range for this instrument.
        /// BFFC1905  Invalid Value for NPLC Parameter.
        /// BFFC1906  Autoranging not allowed with a 2430 in pulse mode.
        /// BFFC1907  Offset Compensation ohms not allowed with a 2430 in
        ///           pulse mode.
        /// BFFC1908  Filter not allowed with a 2430 in pulse mode.
        /// BFFC1909  Concurrent measurements are disabled.
        /// BFFC190A  Command ignored when using a 2430 in pulse mode.
        /// BFFC190B  Command not allowed when not using a model 2430.
        /// BFFC190C  Source Function MEMORY Unsupported.
        /// BFFC190D  Start parameter must be lower than Stop Parameter.
        /// BFFC190E  Not Enough Memory.
        /// BFFC190F  Instrument read error.
        /// BFFC1910  Corrupted pointer to range table.
        /// BFFC1911  Failed to create linked list of devices.
        /// BFFC1912  Unsupported communications type.
        /// 
        /// 
        /// 
        /// </returns>
        public int Configure_List_VI(int Number_Of_Points, double[] Values, double Source_Compliance, double Source_Protection, double Sense_Range, double Speed)
        {
            int pInvokeResult = PInvoke.Configure_List_VI(this._handle, Number_Of_Points, Values, Source_Compliance, Source_Protection, Sense_Range, Speed);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the common SourceMeter trigger attributes.  These attributes include the trigger source and trigger delay.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the trigger source you want to use.  The driver sets the KE2400_ATTR_TRIGGER_SOURCE attribute to this value.
        /// 
        /// After you call either the KE2400_Read or the KE2400_Initiate function, the SourceMeter waits for the trigger you specify in this parameter. After it receives the trigger, the SourceMeter waits the length of time you specify in the Trigger Delay parameter.  The SourceMeter then takes a measurement.
        /// 
        /// Valid Values:
        /// KE2400_VAL_IMMEDIATE     - Immediate (Default)
        /// KE2400_VAL_EXTERNAL      - External
        /// KE2400_VAL_SOFTWARE_TRIG - Software Trigger Function
        /// KE2400_VAL_TIMER         - Timer
        /// KE2400_VAL_MANUAL        - Manual
        /// KE2400_VAL_TLINK1        - TLink 1
        /// KE2400_VAL_TLINK2        - TLink 2
        /// KE2400_VAL_TLINK3        - TLink 3
        /// KE2400_VAL_TLINK4        - TLink 4
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter does not wait
        /// for a trigger of any kind.
        /// 
        /// (2) KE2400_VAL_EXTERNAL - The SourceMeter waits for a
        /// trigger on the external trigger input.
        /// 
        /// (3) KE2400_VAL_SOFTWARE_TRIG - The SourceMeter waits until you call the KE2400_SendSoftwareTrigger function.
        /// 
        /// </param>
        /// <param name="Trigger_Delay__sec_">
        /// Pass the value you want to use for the trigger delay.  Express this value in seconds.  The driver sets the KE2400_ATTR_TRIGGER_DELAY attribute to this value. 
        /// 
        /// The trigger delay specifies the length of time the SourceMeter waits after it receives the trigger and before it takes a measurement.
        /// 
        /// Use positive values to set the trigger delay in seconds.  The driver reserves negative values for configuring the DMM to calculate the trigger delay automatically.
        /// 
        /// Defined Constant Values:
        /// KE2400_VAL_AUTO_DELAY_OFF (-2.0)- Auto-delay off
        /// KE2400_VAL_AUTO_DELAY_ON (-1.0) - Auto-delay on
        /// 
        /// Valid Manual Range:  0.0 - 999.9999 seconds
        /// 
        /// Default Value: 0.0 (seconds)
        /// 
        /// Notes:
        /// 
        /// (1) Setting this parameter to KE2400_VAL_AUTO_DELAY_ON (-1.0) configures the SourceMeter to calculate the trigger delay before each measurement.
        /// 
        /// (2) Setting this parameter to KE2400_VAL_AUTO_DELAY_OFF (-2.0)stops the SourceMeter from calculating the trigger delay and sets the trigger delay to the last automatically calculated value.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.         
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureTrigger(int Trigger_Source, double Trigger_Delay__sec_)
        {
            int pInvokeResult = PInvoke.ConfigureTrigger(this._handle, Trigger_Source, Trigger_Delay__sec_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the polarity of the external trigger source of the SourceMeter.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Trigger_Slope">
        /// Pass the polarity of the external trigger slope. The driver sets the KE2400_ATTR_TRIGGER_SLOPE attribute to this value. The SourceMeter triggers on either the rising or the falling edge of the external trigger source depending on the value of this attribute.
        /// 
        /// Defined Values:
        /// 
        /// KE2400_VAL_POSITIVE (Default) - The driver triggers on the rising edge of the external trigger.
        /// 
        /// KE2400_VAL_NEGATIVE - The driver triggers on the falling edge of the external trigger.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.          
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureTriggerSlope(int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSlope(this._handle, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger that initiates a change in the source output level during each Source-Delay-Measure cycle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the source trigger you want to use.  The driver sets the KE2400_ATTR_SOURCE_TRIGGER attribute to this
        /// value. 
        /// 
        /// After you call one of the KE2400_ReadMultiPoint, KE2400_ReadMultiPointChar, KE2400_Read, or KE2400_Initiate functions, the SourceMeter waits for the trigger you specify in this parameter.
        /// 
        /// After it receives the trigger, the SourceMeter waits the length of time you specify in the Trigger Delay parameter.  The SourceMeter then takes a measurement and changes the source level.
        /// 
        /// Valid Values:
        /// KE2400_VAL_IMMEDIATE     - Immediate (Default)
        /// KE2400_VAL_TLINK(n)      - Trigger link line (n)
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter does not wait
        /// for a trigger of any kind.
        /// 
        /// (2) KE2400_VAL_TLINK(n) - The SourceMeter waits for a
        /// trigger on the trigger link line (n) input.
        /// 
        /// </param>
        /// <param name="Trigger_Delay__sec_">
        /// Pass the value you want to use for the trigger delay.  Express this value in seconds.  The driver sets the KE2400_ATTR_SOURCE_DELAY attribute to this value. 
        /// 
        /// The trigger delay specifies the length of time the SourceMeter  waits after it receives the trigger and before it changes the source level.
        /// 
        /// 
        /// Valid Range:  0.0 - 999.9999 (seconds)
        /// 
        /// Default Value: 1.0 (seconds)
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceTrigger(int Trigger_Source, double Trigger_Delay__sec_)
        {
            int pInvokeResult = PInvoke.ConfigureSourceTrigger(this._handle, Trigger_Source, Trigger_Delay__sec_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the SourceMeter arm layer attributes.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Count">
        /// Set arm layer count.
        /// 
        /// Valid values: 
        ///   1 to 2500 
        ///   -1 for infinite.
        /// 
        /// Notes: 
        /// The measurement readings are products of the arm layer count times the trigger layer count.
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the arm trigger source you want to use.  The driver sets the KE2400_ATTR_ARM_SOURCE attribute to this value.
        /// 
        /// After you call either the KE2400_Read or the KE2400_Initiate function, the SourceMeter waits for the trigger you specify in this parameter.
        /// 
        /// After it receives the trigger, the SourceMeter waits the length of time you specify in the Trigger Delay parameter.  The SourceMeter then takes a measurement.
        /// 
        /// Valid Values:
        ///     KE2400_VAL_IMMEDIATE    - Immediate (Default)
        ///     KE2400_VAL_TLINK        - Link trigger
        ///     KE2400_VAL_SOFTWARE_TRIG- Software Trigger Function
        ///     KE2400_VAL_TIMER        - Timed trigger
        ///     KE2400_VAL_MANUAL       - Manual trigger 
        ///     KE2400_VAL_PSTEST       - Positive pulse of SOT 
        ///                               line trigger
        ///     KE2400_VAL_NSTEST       - Negative pulse of SOT 
        ///                               line trigger 
        ///     KE2400_VAL_BSTEST       - Positive or Negative edge 
        ///                               on SOT line trigger 
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter does not wait
        /// for a trigger of any kind.
        /// 
        /// (3) KE2400_VAL_SOFTWARE_TRIG - The SourceMeter waits until
        /// you call the KE2400_SendSoftwareTrigger function.
        /// 
        /// (4) KE2400_VAL_TIMER - The SourceMeter generates a trigger at the beginning of the timer interval and every time it times out.  The timer interval is specified by the attribute.
        /// 
        /// (5) KE2400_VAL_MANUAL - The SourceMeter waits for a trigger on the front panel TRIG key.
        /// 
        /// </param>
        /// <param name="Timer">
        /// The timer interval for Timer trigger.
        /// 
        /// Valid value:
        /// 
        /// 0.001 to 99999.999 (sec).
        /// </param>
        /// <param name="Trigger_Bypass">
        /// Arm layer direction.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_BYPASS_ONCE
        /// KE2400_VAL_BYPASS_NEVER
        /// 
        /// </param>
        /// <param name="Trigger_Link_Input_Line">
        /// Trigger link input line number if the arm trigger source is set to KE2400_VAL_TLINK
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_TLINK1
        /// KE2400_VAL_TLINK2
        /// KE2400_VAL_TLINK3
        /// KE2400_VAL_TLINK4
        /// 
        /// </param>
        /// <param name="Trigger_Link_Output_Line">
        /// Trigger link output line number if trigger output is enabled. This line number should be different than the trigger link input line number.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_TLINK1
        /// KE2400_VAL_TLINK2
        /// KE2400_VAL_TLINK3
        /// KE2400_VAL_TLINK4
        /// 
        /// </param>
        /// <param name="Trigger_Output">
        /// Arm trigger output line is enabled or disabled.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_OUTPUT_ENABLED
        /// KE2400_VAL_OUTPUT_DISABLED
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureArmLayer(int Count, int Trigger_Source, double Timer, int Trigger_Bypass, int Trigger_Link_Input_Line, int Trigger_Link_Output_Line, int Trigger_Output)
        {
            int pInvokeResult = PInvoke.ConfigureArmLayer(this._handle, Count, Trigger_Source, Timer, Trigger_Bypass, Trigger_Link_Input_Line, Trigger_Link_Output_Line, Trigger_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the SourceMeter trigger layer attributes.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Count">
        /// Set trigger layer count.
        /// 
        /// Valid value: 
        ///     1 to 2500
        ///    
        /// Notes: 
        /// The measurement readings are products of the arm layer count times the trigger layer count.
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the trigger source you want to use.  The driver sets the KE2400_ATTR_TRIG_SOURCE attribute to this value.
        /// 
        /// After you call either the KE2400_Read or the KE2400_Initiate function, the SourceMeter waits for the trigger you specify in this parameter.
        /// 
        /// After it receives the trigger, the SourceMeter waits the length of time you specify in the Trigger Delay parameter.  The SourceMeter then takes a measurement.
        /// 
        /// Valid Values:
        /// 
        /// KE2400_VAL_IMMEDIATE    - Immediate (Default)
        /// KE2400_VAL_TLINK        - Link trigger
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter does not wait
        /// for a trigger of any kind.
        /// 
        /// (3) KE2400_VAL_TLINK - The trigger signal is from trigger link line.
        /// 
        /// </param>
        /// <param name="Delay">
        /// Pass the value you want to use for the trigger delay.  Express this value in seconds.  The driver sets the KE2400_ATTR_TRIGGER_DELAY attribute to this value. 
        /// 
        /// The trigger delay specifies the length of time the SourceMeter waits after it receives the trigger and before it takes a measurement.
        /// 
        /// Use positive values to set the trigger delay in seconds.  The driver reserves negative values for configuring the SourceMeter to calculate the trigger delay automatically.
        /// 
        /// Defined Constant Values:
        /// KE2400_VAL_AUTO_DELAY_OFF (-2.0) - Auto-delay off
        /// KE2400_VAL_AUTO_DELAY_ON (-1.0) - Auto-delay on
        /// 
        /// Valid Manual Range:  0.0 - 999.9999 (seconds)
        /// 
        /// Default Value: 0.0 (seconds)
        /// 
        /// Notes:
        /// 
        /// (1) Setting this parameter to KE2400_VAL_AUTO_DELAY_ON 
        /// (-1.0) Configures the SourceMeter to calculate the trigger delay before each measurement.
        /// 
        /// (2) Setting this parameter to KE2400_VAL_AUTO_DELAY_OFF 
        /// (-2.0) Stops the SourceMeter from calculating the trigger delay and sets the trigger delay to the last automatically calculated value.
        /// </param>
        /// <param name="Trigger_Bypass">
        /// Trigger layer direction.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_BYPASS_ONCE
        /// KE2400_VAL_BYPASS_NEVER
        /// </param>
        /// <param name="Trigger_Link_Input_Line">
        /// Trigger link input line number if trigger source set to KE2400_VAL_TLINK
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_TLINK1
        /// KE2400_VAL_TLINK2
        /// KE2400_VAL_TLINK3
        /// KE2400_VAL_TLINK4
        /// 
        /// </param>
        /// <param name="Trigger_Link_Output_Line">
        /// Trigger link output line number if trigger output is enabled. This line number should be different than trigger link input line number.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_TLINK1
        /// KE2400_VAL_TLINK2
        /// KE2400_VAL_TLINK3
        /// KE2400_VAL_TLINK4
        /// 
        /// </param>
        /// <param name="Trigger_Output">
        /// Trigger output line is enabled or disabled.
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_OUTPUT_ENABLED
        /// KE2400_VAL_OUTPUT_DISABLED
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureTriggerLayer(int Count, int Trigger_Source, double Delay, int Trigger_Bypass, int Trigger_Link_Input_Line, int Trigger_Link_Output_Line, int Trigger_Output)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerLayer(this._handle, Count, Trigger_Source, Delay, Trigger_Bypass, Trigger_Link_Input_Line, Trigger_Link_Output_Line, Trigger_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure buffer elements, data format, size and timestamp
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Note: The IviDmm-compatible functions and attributes update the buffer size attribute to be the product of Trigger Count and Sample Count. To independently set this attribute, call the IviDmm-compatible functions first or use the KE2400-specific functions instead.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Data_Elements">
        /// Specifies which data elements the instrument returns for a reading in the buffer.
        /// 
        /// Default value: KE2400_VAL_ELEMENT_READING - Reading only
        /// 
        /// Valid values: 
        ///   Valid values are combinations of the following:
        ///   Measurement elements
        ///     KE2400_VAL_ELEMENT_READING
        ///     KE2400_VAL_ELEMENT_CURRENT
        ///     KE2400_VAL_ELEMENT_VOLTAGE
        ///     KE2400_VAL_ELEMENT_RESISTANCE
        ///   Source elements
        ///     KE2400_VAL_ELEMENT_SOURCE
        ///     KE2400_VAL_ELEMENT_SOURCE_CURRENT
        ///     KE2400_VAL_ELEMENT_SOURCE_VOLTAGE
        ///   Information elements
        ///     KE2400_VAL_ELEMENT_TIME
        ///     KE2400_VAL_ELEMENT_STATUS
        /// 
        /// Notes:
        /// 
        /// (1) The attribute value is encoded as a bitmask. An enabled element has a 1 in corresponding place in the attribute value.
        ///      At least one measurement or source element must be selected. Any combination of information elements, including none, may be selected.
        /// 
        /// (2) KE2400_VAL_ELEMENT_READING is a special value meanig return the measured value set by the KE2400_ATTR_FUNCTION attribute.
        /// 
        /// (3)KE2400_VAL_ELEMENT_SOURCE is special value meaning return the programmed source level, Not a measured value.
        /// 
        /// (4)KE2400_VAL_ELEMENT_SOURCE and KE2400_VAL_ELEMENT_READING can be used together.
        /// 
        /// (5)KE2400_VAL_ELEMENT_SOURCE and/or KE2400_VAL_ELEMENT_READING can not be used with specific measurement elements (e.i. KE2400_VAL_ELEMENT_VOLTAGE, KE2400_VAL_ELEMENT_CURRENT, and KE2400_VAL_ELEMENT_RESISTANCE)
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Set buffer data format
        /// 
        /// Valid value:
        ///               KE2400_VAL_FORMAT_ASCII,
        ///               KE2400_VAL_FORMAT_SINGLE,
        ///               KE2400_VAL_FORMAT_SINGLE32
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Set buffer size.
        /// 
        /// Valid value:
        ///    1 to 2500
        /// 
        /// 
        /// </param>
        /// <param name="Timestamp_Format">
        /// Set the timestamp format.
        /// 
        /// Valid values:
        ///     KE2400_VAL_TIMESTAMP_ABS    Absolute time from the start 
        ///                                 of the task
        ///     KE2400_VAL_TIMESTAMP_DELTA  Delta times between
        ///                                 measurements
        ///     KE2400_VAL_TIMESTAMP_MANUAL Absolute time from the last
        ///                                 manual timestamp reset
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureBuffer(int Data_Elements, int Data_Format, int Buffer_Size, int Timestamp_Format)
        {
            int pInvokeResult = PInvoke.ConfigureBuffer(this._handle, Data_Elements, Data_Format, Buffer_Size, Timestamp_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Clear buffer.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ClearBuffer()
        {
            int pInvokeResult = PInvoke.ClearBuffer(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enable buffer.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Enable_Buffer">
        /// Enable buffer control.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int EnableBuffer(bool Enable_Buffer)
        {
            int pInvokeResult = PInvoke.EnableBuffer(this._handle, System.Convert.ToUInt16(Enable_Buffer));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attributes for multi-point measurements.  These attributes include the trigger count, sample count, sample trigger and sample interval.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Trigger_Count">
        /// Pass the number of triggers you want the SourceMeter to receive before returning to the Idle state.  The driver sets the KE2400_ATTR_TRIGGER_COUNT attribute to this value.
        /// 
        /// Valid Range:  1 - 2500, KE2400_VAL_INFINITE (-1)
        /// 
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sample_Count">
        /// Pass the number of measurements you want the SourceMeter to take each time it receives a trigger.  The driver sets the KE2400_ATTR_SAMPLE_COUNT attribute to this value. 
        /// 
        /// Valid Range:  1 - 2500
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sample_Trigger">
        /// Pass the type of sample trigger you want to use.  The driver sets the KE2400_ATTR_SAMPLE_TRIGGER attribute to this value. 
        /// 
        /// When the SourceMeter takes a measurement and the Sample Count parameter is greater than 1, the SourceMeter does not take the next measurement until the event you specify in the Sample Trigger parameter occurs.
        /// 
        /// Valid Values:
        /// KE2400_VAL_IMMEDIATE     - Immediate (Default)
        /// KE2400_VAL_TLINK1        - Trigger Link Line 1
        /// KE2400_VAL_TLINK2        - Trigger Link Line 2
        /// KE2400_VAL_TLINK3        - Trigger Link Line 3
        /// KE2400_VAL_TLINK4        - Trigger Link Line 4
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter takes the next measurement immediately.  The SourceMeter does not wait for a trigger of any kind.
        /// 
        /// 
        /// </param>
        /// <param name="Sample_Interval__sec_">
        /// Pass the length of time you want the SourceMeter to wait between samples.  Express this value in seconds.  The driver sets the KE2400_ATTR_SAMPLE_INTERVAL attribute to this value. 
        /// 
        /// Note:
        /// 
        /// (1) The sample interval must be 0.0 unless the instrument model is 2430 and a pulsed source is enabled. Call KE2400_EnableSource() with KE2400_VAL_AUTO_SYNC_ENABLED to enable a source.
        /// 
        /// 
        /// (2) In this driver, this parameter is used to select pulse mode for model 2430. Usage is extended from the the IviDmm specification. It is not dependent on the sample count nor the sample trigger settings.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureMultiPoint(int Trigger_Count, int Sample_Count, int Sample_Trigger, double Sample_Interval__sec_)
        {
            int pInvokeResult = PInvoke.ConfigureMultiPoint(this._handle, Trigger_Count, Sample_Count, Sample_Trigger, Sample_Interval__sec_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// After each measurement, the SourceMeter generates a measurement-complete signal. This function configures the destination of the measurement-complete signal. 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Meas_Complete_Destination">
        /// Specify the destination of the measurement-complete signal. The driver sets the KE2400_ATTR_MEAS_COMPLETE_DEST attribute to this value.
        /// 
        /// Valid Values:
        /// KE2400_VAL_NONE         - None (Default)
        /// KE2400_VAL_TLINK1       - Trigger Link Line 1
        /// KE2400_VAL_TLINK2       - Trigger Link Line 2
        /// KE2400_VAL_TLINK3       - Trigger Link Line 3
        /// KE2400_VAL_TLINK4       - Trigger Link Line 4
        /// 
        /// Notes:
        /// (1) This signal is commonly referred to as Voltmeter Complete.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                    
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureMeasCompleteDest(int Meas_Complete_Destination)
        {
            int pInvokeResult = PInvoke.ConfigureMeasCompleteDest(this._handle, Meas_Complete_Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Set the statistics functions for buffer data.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Function">
        /// Set the statistics functions.
        /// 
        /// Valid value:
        /// KE2400_VAL_STATS_MEAN       Mean
        /// KE2400_VAL_STATS_SDEV       Standard Deviation
        /// KE2400_VAL_STATS_MIN        Minimum
        /// KE2400_VAL_STATS_MAX        Maximum
        /// KE2400_VAL_STATS_PK2PK      Peak to Peak
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureStatistics(int Function)
        {
            int pInvokeResult = PInvoke.ConfigureStatistics(this._handle, Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the auto zero mode of the SourceMeter.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Auto_Zero_Mode">
        /// Specify the auto-zero mode. The driver sets the KE2400_ATTR_AUTO_ZERO attribute to this value.
        /// 
        /// When the auto-zero mode is enabled, the SourceMeter internally disconnects the input signal and takes a Zero Reading. The SourceMeter then subtracts the Zero Reading from the measurement. This prevents offset voltages present in the instrument's input circuitry from affecting measurement accuracy.
        /// 
        /// Defined Values:
        /// 
        /// KE2400_VAL_AUTO_ZERO_ON - Configures the SourceMeter to take a Zero Reading for each measurement. The SourceMeter subtracts the Zero Reading from the value it measures.
        /// 
        /// KE2400_VAL_AUTO_ZERO_OFF (Default) - Disables the auto-zero feature.
        /// 
        /// KE2400_VAL_AUTO_ZERO_ONCE - Configures the SourceMeter to take a Zero Reading immediately. The SourceMeter then subtracts this Zero Reading from all subsequent values it measures.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureAutoZeroMode(int Auto_Zero_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureAutoZeroMode(this._handle, Auto_Zero_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the powerline frequency of the SourceMeter.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="PowerLine_Frequency">
        /// Specify the power line frequency in Hertz. The driver sets the KE2400_ATTR_POWERLINE_FREQ attribute to this value.
        /// 
        /// Valid Values: 50.0, 60.0 Hertz or 
        ///               KE2400_VAL_AUTO_POWERLINE_FREQ_ON  (-1),
        ///               KE2400_VAL_AUTO_POWERLINE_FREQ_OFF (0)
        /// 
        /// Default Value: 60.0 Hertz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigurePowerLineFrequency(double PowerLine_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigurePowerLineFrequency(this._handle, PowerLine_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the digital filter.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Filter_Type">
        /// Pass the type of filter
        /// 
        /// Valid Values:
        /// KE2400_VAL_FILTER_MOVING  
        /// KE2400_VAL_FILTER_REPEATING
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_FILTER_MOVING - Every time a reading conversion occurs, the readings in the stack are averaged to yield a single filtered reading.
        /// 
        /// (2) KE2400_VAL_FILTER_REPEATING - Takes a selected number of reading conversions, averages them, and yield a reading. It then flushes its stack and start over.
        /// 
        /// 
        /// </param>
        /// <param name="Count">
        /// Pass the number of filtering  
        /// 
        /// Valid values:
        /// 
        /// 2 to 100
        /// 
        /// </param>
        /// <param name="Window">
        /// Pass the number of noise tolerance. 
        /// 
        /// Valid Range:  1 - 105
        /// 
        /// This parameter is ignored for models that do not have this feature.
        /// 
        /// This feature is not currently available on any model.
        /// </param>
        /// <param name="Enabled">
        /// Enable or disable the digital filter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureFilter(int Filter_Type, int Count, double Window, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureFilter(this._handle, Filter_Type, Count, Window, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the median filter. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This function is for Model 6430 only. The median filter is not supported on 2400 Series instruments.
        /// 
        /// (2) With both filters enabled, the median filter operation is performed first. 
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Rank">
        /// Pass the rank number R. For example, if you pass 2 (R=2), the sample readings = 2*R +1=2*2+1=5. The median value is on the third from an ascending order.
        /// 
        /// Note:
        /// 
        ///      This function is for Model 6430 only.
        /// </param>
        /// <param name="Enabled">
        /// Enable or disable the median filter.
        /// 
        /// Note:
        /// 
        ///      This function is for Model 6430 only.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureMedianFilter(int Rank, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureMedianFilter(this._handle, Rank, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the relative operation attributes for the current measurement function.  These attributes include KE2400_ATTR_RELATIVE_REFERENCE and KE2400_ATTR_RELATIVE_ENABLED.
        /// 
        /// The relative operation can be used to null offset or subtract a baseline reading from future readings. 
        /// 
        /// If relative operation is enabled, the KE2400_Read and KE2400_Fetch functions will return readings that reflect the relative operation.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Reference">
        /// This parameter sets the reference for the relative operation.  The driver sets the KE2400_ATTR_RELATIVE_REFERENCE attribute to this value.  
        /// 
        /// Valid Range:  -9.99999e20, 9.99999e20
        /// Default Value: 0
        /// 
        /// Note: Relative applies to the current measurement and can be set to well outside the normal range of values for the measurement. Therefore, Relative is disabled by changing the measurement function. 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the relative operation.  The driver sets the KE2400_ATTR_RELATIVE_ENABLED attribute to this value.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Enable Relative
        /// VI_FALSE (0) - Disable Relative (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureRelative(double Reference, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureRelative(this._handle, Reference, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the state of the instrument's four digital output lines as well as the mode of Digital Output Line #4 when using limit tests. 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Level">
        /// Select line number for output. 
        /// number   Output Lines
        /// 1        Line1
        /// 2        Line2
        /// 3        Line1 + Line2
        /// 4        Line3
        /// 5        Line1 + Line3
        /// 6                Line2 + Line3
        /// 7        Line1 + Line2 + Line3
        /// 
        /// The following combinations are available only when TTL line 4 is configured as digital output, namely, passing value  KE2400_VAL_TTL4_MODE_DO to TTL4 mode.
        /// 
        /// 8                                Line4
        /// 9        Line1 +                 Line4
        /// 10       Line2 +                 Line4
        /// 11       Line1 + Line2 +         Line4
        /// 12                       Line3 + Line4
        /// 13       Line1 +         Line3 + Line4
        /// 14               Line2 + Line3 + Line4
        /// 15       Line1 + Line2 + Line3 + Line4
        /// 
        /// </param>
        /// <param name="Time_Delay">
        /// Specify time delay of pulse-width for pass/fail pattern.
        /// 
        /// Valid value:
        /// 0 - 60 sec.
        /// </param>
        /// <param name="TTL4_Mode">
        /// Specify line 4 output mode
        /// 
        /// Valid value:
        /// 
        /// KE2400_VAL_TTL4_MODE_EOT         End of test
        /// KE2400_VAL_TTL4_MODE_BUSY        Line busy
        /// KE2400_VAL_TTL4_MODE_DO          Digital Output
        /// </param>
        /// <param name="TTL4_Level">
        /// Select TTL4 level for busy.
        /// 
        /// Valid value:
        /// 
        /// 1 High
        /// 0 Low
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureDO(int Level, double Time_Delay, int TTL4_Mode, bool TTL4_Level)
        {
            int pInvokeResult = PInvoke.ConfigureDO(this._handle, Level, Time_Delay, TTL4_Mode, System.Convert.ToUInt16(TTL4_Level));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures arm trigger that initiates a measurement in the Source-Delay-Measure cycle.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trigger_Source">
        /// Specify the measurement trigger you want to use.  The driver sets the KE2400_ATTR_MEASUREMENT_TRIGGER attribute to this value. 
        /// 
        /// After you call one of the KE2400_ReadMultiPoint, KE2400_ReadMultiPointChar, KE2400_Read, or KE2400_Initiate functions, the SourceMeter waits for the trigger you specify in this parameter.
        /// 
        /// Valid Values:
        /// KE2400_VAL_IMMEDIATE     - Immediate (Default)
        /// KE2400_VAL_TLINK(n)      - Trigger link line (n)
        /// 
        /// Notes:
        /// 
        /// (1) KE2400_VAL_IMMEDIATE - The SourceMeter does not wait
        /// for a trigger of any kind.
        /// 
        /// (2) KE2400_VAL_TLINK(n) - The SourceMeter waits for a
        /// trigger on the trigger link line (n) input.
        /// 
        /// 
        /// </param>
        /// <param name="Trigger_Delay__sec_">
        /// Pass the value you want to use for the arm trigger delay. Express this value in seconds.
        /// 
        /// The trigger delay specifies the length of time the SourceMeter  waits after it receives the arm trigger and before it takes a measurement.
        /// 
        /// The model 2400 series does not support the arm layer trigger delay. Therefore, this parameter value must be 0.
        /// 
        /// 
        /// Valid Range:  0.0  (seconds)
        /// 
        /// Default Value: 0.0 (seconds)
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureMeasurementTrigger(int Trigger_Source, double Trigger_Delay__sec_)
        {
            int pInvokeResult = PInvoke.ConfigureMeasurementTrigger(this._handle, Trigger_Source, Trigger_Delay__sec_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Tbis function configures auto-ranging options for measurments and sourcing on the Series 2400 SourceMeters. 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Sense_Mode">
        /// The Sense Mode determine if auto-ranging is performed only on the first sample or on each sample of a sample set initiated by a trigger.
        /// 
        /// Valid Values:
        ///     KE2400_VAL_RCM_SINGLE    --  first sample only
        ///     KE2400_VAL_RCM_MULTIPLE  --  each sample
        /// 
        /// </param>
        /// <param name="Source_Mode">
        /// The Source Mode determines when auto-ranging is performed when sourcing a list or sweep. 
        /// 
        /// Valid Values:
        ///     KE2400_VAL_SWEEP_RANGE_BEST  -- auto-range before the first point only.
        ///     KE2400_VAL_SWEEP_RANGE_AUTO  -- auto-range on each point.
        ///     KE2400_VAL_SWEEP_RANGE_FIXED -- no auto-ranging.
        /// 
        /// </param>
        /// <param name="Initial_Soak_Time">
        /// The Initial Soak Time determines how long to pause after changing the source for the first point of a list or sweep.
        /// 
        /// Valid Values:
        ///     0 - 10000.00 seconds.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAutoRange(int Sense_Mode, int Source_Mode, double Initial_Soak_Time)
        {
            int pInvokeResult = PInvoke.ConfigureAutoRange(this._handle, Sense_Mode, Source_Mode, Initial_Soak_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Purpose
        /// 
        ///       This function configures the upper and lower limits for autoranging for current measurement.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Upper_Limit">
        /// Pass the upper range allowed during autoranging of current measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This value must always be KE2400_VAL_AUTO_RANGE_UPPER_LIMIT_AUTO(-3) when the current measurement function is Voltage or Current.
        /// 
        /// (2) This value must always be greater than or equal to the  Lower Limit parameter value when the current measurement function is Resistance measurement.
        /// </param>
        /// <param name="Lower_Limit">
        /// Pass the lower range allowed during autoranging of current measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This value must always be less than or equal to the Upper Limit parameter value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAutoRangeLimits(double Upper_Limit, double Lower_Limit)
        {
            int pInvokeResult = PInvoke.ConfigureAutoRangeLimits(this._handle, Upper_Limit, Lower_Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Purpose
        /// 
        ///       This function configures the upper and lower limits for autoranging for the specified measurement.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Measurement_Function">
        /// Pass the measurement function you want to configure the autoranging limits. 
        /// 
        /// Valid Values:
        /// KE2400_VAL_DC_VOLTS               - DC Volts 
        /// KE2400_VAL_DC_CURRENT(Default)    - DC Current
        /// KE2400_VAL_2_WIRE_RES             - 2-Wire Resistance
        /// KE2400_VAL_4_WIRE_RES             - 4-Wire Resistance
        /// KE2400_VAL_2_WIRE_RES_OFFSET_COMP - 2-Wire Resistance 
        ///                                     Offset Compensated
        /// KE2400_VAL_4_WIRE_RES_OFFSET_COMP - 4-Wire Resistance
        ///                                     Offset Compensated
        /// </param>
        /// <param name="Upper_Limit">
        /// Pass the upper range allowed during autoranging of specified measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This value must always be KE2400_VAL_AUTO_RANGE_UPPER_LIMIT_AUTO(-3) when the specified measurement function is Voltage or Current.
        /// 
        /// (2) This value must always be greater than or equal to the  Lower Limit parameter value when the specified measurement function is Resistance measurement.
        /// </param>
        /// <param name="Lower_Limit">
        /// Pass the lower range allowed during autoranging of specified measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This value must always be less than or equal to the Upper Limit parameter value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAutoRangeLimitsEx(int Measurement_Function, double Upper_Limit, double Lower_Limit)
        {
            int pInvokeResult = PInvoke.ConfigureAutoRangeLimitsEx(this._handle, Measurement_Function, Upper_Limit, Lower_Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures attributes for the math operation. These attributes include KE2400_ATTR_MATH_FUNCTION and KE2400_ATTR_MATH_ENABLED.
        /// 
        /// The math operation is performed after the relative operation.  If math operation is enabled, the KE2400_Read and KE2400_Fetch functions will return readings that reflect the math operation.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Function">
        /// Pass the math calculation function you want the SourceMeter set  to this value.
        /// 
        /// Notes:
        /// 
        /// (1) This value must always be greater than or equal to the  Lower Limit parameter value. to perform.  The driver sets the KE2400_ATTR_MATH_FUNCTION attribute to this value. 
        /// 
        /// Valid Values:
        ///     KE2400_VAL_MATH_RECIPROCAL - m/X+b calculation
        ///     KE2400_VAL_MATH_MXB        - mX+b calculation
        ///     KE2400_VAL_MATH_PERCENT    - Percent calculation
        ///     KE2400_VAL_MATH_LOG10      - Log10 calculation
        ///     KE2400_VAL_MATH_EXPRESSION - User-defined expression         
        ///     KE2400_VAL_MATH_POWER      - Power              
        ///     KE2400_VAL_MATH_OFFSET_COMPENSATED_OHMS      
        ///                                - Offset Compensated Ohms    
        ///     KE2400_VAL_MATH_RESISTOR_VOLTAGE_COEFFICIENT 
        ///                                - Resistor Voltage Coefficient 
        ///     KE2400_VAL_MATH_VARISTOR_ALPHA
        ///                                - Varistor Alpha         
        /// 
        /// Default Value: KE2400_VAL_MATH_MXB
        /// 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the math operation.  The driver sets the KE2400_ATTR_MATH_ENABLED attribute to this value.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Enable Math Operation
        /// VI_FALSE (0) - Disable Math Operation (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureMath(int Function, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureMath(this._handle, Function, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the user-defined math expression. This expresion is used when the math calculation is enabled and Expression is selected as the math function using the ConfigureMath function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Expression">
        /// Pass the mathematical expression you want the instrument to evaluate on measurements. The expression can contain measure
        /// and source readings, numeric constants, and several standard math operator symbols as well parentheses.
        /// 
        /// Valid parameter names for measure and source readings include:
        ///     VOLTage     Use V-Measure or V-Source reading
        ///     CURRent     Use I-Measure or I-Source reading
        ///     RESistance  Use ohms reading
        ///     TIME        Use timestamp reading
        /// 
        /// Valid math operators and their operations are listed as follows:
        ///     +   Add
        ///     -   Subtract
        ///     *   Multiply
        ///     /   Divide
        ///     ^   Exponent
        ///     log Log base 10 of absolute value
        ///     ln  Natural log of absolute value
        ///     sin Sine
        ///     cos Cosine
        ///     tan Tangent
        ///     exp ex
        ///     abs Absolute value
        /// 
        /// 
        /// To specify expressions on sequences of measurements, use square brackets to indicate the zero-based index of an element in the sequence. Each calculation results in one value for the sequence of measurements. For example, 
        ///     (volt[1] - volt[0]) / (curr[1] - curr[0])
        /// returns a single offset compensated ohms result for each two measurements.
        /// 
        /// Default Value:
        ///     VOLT*CURR
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureMathExpression(string Expression)
        {
            int pInvokeResult = PInvoke.ConfigureMathExpression(this._handle, Expression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures attributes for the mX+b (polynomial) or m/X + b (Reciprocal) math function. These attributes include KE2400_ATTR_MXB_M_FACTOR and KE2400_ATTR_MXB_B_OFFSET.
        /// 
        /// The mX+b function allows you to manipulate readings mathematically according to the following calculation:
        /// 
        ///   Y = mX + b   or   Y = m / X + b
        /// 
        /// Where: 
        ///   X - Normal reading.
        ///   m - User-specified constant for scale factor.
        ///   b - User-specified constant for offset.
        ///   Y - Math result
        /// 
        /// The math operation is performed after the relative operation.  If math operation is enabled, the KE2400_Read and KE2400_Fetch functions will return readings that reflect the math operation.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="m_Scale_factor">
        /// Pass the value for the "m" scale factor of the mX+b or m/X+b math function. The driver sets the KE2400_ATTR_MXB_M_FACTOR attribute to this value. 
        /// 
        /// Valid Range: -9.99999E+20 to 9.99999E+20
        /// 
        /// Default Value: 1.0
        /// </param>
        /// <param name="b_Offset">
        /// Pass the value for the "b" offset of the mX+b or m/X+b math function.   The driver sets the KE2400_ATTR_MXB_B_OFFSET attribute to this value.
        /// 
        /// The value must be in units appropriate for the Measurement Function parameter of the KE2400_ConfigureMeasurement function as shown in the following table.
        ///   
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Valid Range: -9.99999E+20 to 9.99999E+20
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureMathMXB(double m_Scale_factor, double b_Offset)
        {
            int pInvokeResult = PInvoke.ConfigureMathMXB(this._handle, m_Scale_factor, b_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attribute for the percent math function.  This attribute is KE2400_ATTR_PERCENT_REFERENCE.
        /// 
        /// The percent calculation performs a percent deviation from a user-specified reference value.  The percentage calculation is performed as follows:
        ///   
        ///             Reading - Reference
        ///   Percent = ------------------- x 100
        ///                   Reference 
        /// 
        /// Where:
        ///   Reading - Normal reading
        ///   Reference - User-specified constant
        ///   Percent - Math result
        /// 
        /// 
        /// The math operation is performed after the relative operation.  If math operation is enabled, the KE2400_Read and KE2400_Fetch functions will return readings that reflect the math operation.
        /// 
        /// 
        /// Notes:
        ///      
        ///   This function is a Keithley extension to the IviDMM class.
        /// 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Reference">
        /// Pass the value for the user-specified reference for the percent function.  The driver sets the KE2400_ATTR_PERCENT_REFERENCE attribute to this value.
        /// 
        /// The value must be in units appropriate for the Measurement Function parameter of the KE2400_ConfigureMeasurement function as shown in the following table.
        ///   
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Valid Range: -9.99999E20 to +9.99999E+20
        /// 
        /// Default Value: 1.0
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureMathPercent(double Reference)
        {
            int pInvokeResult = PInvoke.ConfigureMathPercent(this._handle, Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures attributes for the limit test operation. Limit testing can be applied to all measurement functions.
        /// 
        /// The limit test is performed after mX+b and percent math operations.  Call the KE2400_FetchTestStatus function to get limit test results.  
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// Once limit test is enabled, you must call KE2400_FetchTestStatus to clear any old results that may be in the limit test result register.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Test_Index">
        /// Specifies which limit pairs the client is configuring.
        /// 
        /// Valid Values: 2,3, 5,6,7,8,9,10,11,12 
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Upper_Limit">
        /// Pass the upper range of the limit test.  
        /// 
        /// The value must be in units appropriate for the Measurement Function parameter of the KE2400_ConfigureMeasurement function as shown in the following table.
        ///   
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Valid Range: -9.99999e20 - +9.99999e20
        /// 
        /// Default Value: -1.0
        /// 
        /// Notes:
        /// 
        /// (1) If the math operation is enabled and is set to percentage calculation, then the units of this parameter are in percent.
        /// 
        /// (2) This value must always be greater than or equal to the  Lower Limit parameter value.
        /// 
        /// </param>
        /// <param name="Lower_Limit">
        /// Pass the lower range of the limit test. 
        /// 
        /// The value must be in units appropriate for the Measurement Function parameter of the KE2400_ConfigureMeasurement function as shown in the following table.
        ///   
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Valid Range: -9.99999e20 - +9.99999e20
        /// 
        /// Default Value: -1.0
        /// 
        /// Notes:
        /// 
        /// (1) If the math operation is enabled and is set to percentage calculation, then the units of this parameter are in percent.
        /// 
        /// (2) This value must always be lesser than or equal to the Upper Limit parameter value.
        /// 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the limit test.
        /// 
        /// Valid Range:
        ///     VI_TRUE 
        ///     VI_FALSE
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureLimitTest(int Test_Index, double Upper_Limit, double Lower_Limit, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureLimitTest(this._handle, Test_Index, Upper_Limit, Lower_Limit, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the test parameters for the contact-check feature. 
        /// 
        /// Note: The instrument must have the contact-check option to use this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Resistance_Range">
        /// Pass the upper range, in ohms, of the contact check.  
        /// 
        /// Valid Range: -9.99999e20 - +9.99999e20
        /// 
        /// Default Value: -1.0
        /// 
        /// </param>
        /// <param name="Timeout">
        /// Pass the time limit of the contact check. If the resistance does not fall with the resistance limit during this time, the contact check fails.
        /// 
        /// Valid Range: 
        ///     0.00001 to 999.99990
        ///     KE2400_VAL_INFINITE
        /// 
        /// Default Value: KE2400_VAL_INFINITE
        /// 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the contact check.  
        /// 
        /// Valid Range:
        ///     VI_TRUE 
        ///     VI_FALSE
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureContactCheck(double Resistance_Range, double Timeout, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureContactCheck(this._handle, Resistance_Range, Timeout, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables and configures the fail condition for the source compliance test.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fail_Condition">
        /// Pass the fail condition for the compliance test. 
        /// 
        /// Valid Range: 
        ///     KE2400_VAL_IN    In compliance
        ///     KE2400_VAL_OUT    Out of compliance
        /// 
        /// Default Value: KE2400_VAL_OUT
        /// 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the compliance test.
        /// 
        /// Valid Range:
        ///     VI_TRUE 
        ///     VI_FALSE
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureComplianceTest(int Fail_Condition, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureComplianceTest(this._handle, Fail_Condition, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the mode for the composite test. The mode determines whether the test completes on first fail or on first pass of the enabled limits. Use the KE2400_ConfigureLimitTest function to enable and configure limits.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Mode">
        /// Pass the termination mode for the composite test. A composite test exectutes each enabled limit test (2,3,5-12) in turn until the composite result is known.
        /// 
        /// Valid Values:
        ///    Sorting -- terminates on first pass
        ///    Grading -- terminates on first fail
        /// 
        /// Default Value:
        ///    Sorting
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureCompositeTest(int Mode)
        {
            int pInvokeResult = PInvoke.ConfigureCompositeTest(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables and configures the digital output signal fail pattern for the contact check. 
        /// 
        /// Note: The instrument must have the contact check option to use this function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fail_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement failing the contact check. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Specify whether to enable the contact check output when performing a contact check test.
        /// 
        /// Valid Range:
        ///     VI_TRUE
        ///     VI_FALSE
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureContactCheckOutput(int Fail_Pattern, bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureContactCheckOutput(this._handle, Fail_Pattern, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the digital output signal fail pattern for the compliance test. (The compliance test can be configured to fail when in or when out of compliance using the ConfigureComplianceTest function.) 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fail_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement failing the compliance check. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureComplianceTestOutput(int Fail_Pattern)
        {
            int pInvokeResult = PInvoke.ConfigureComplianceTestOutput(this._handle, Fail_Pattern);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the digital output signal patterns for a specified limit test.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Test_Index">
        /// Specifies which limit pairs the client is configuring.
        /// 
        /// Valid Range:  2,3, 5-12
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Fail_High_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement failing the test's upper limit. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <param name="Pass_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement pass the limit test. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// </param>
        /// <param name="Fail_Low_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement failing the test's lower limit. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureLimitTestOutput(int Test_Index, int Fail_High_Pattern, int Pass_Pattern, int Fail_Low_Pattern)
        {
            int pInvokeResult = PInvoke.ConfigureLimitTestOutput(this._handle, Test_Index, Fail_High_Pattern, Pass_Pattern, Fail_Low_Pattern);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the digital output signal for the composite test. Either the pass or fail pattern is output upon the specified output event. The digital output signal is cleared upon the specified reset event.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Pass_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement passing the composite test. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <param name="Fail_Pattern">
        /// Pass the 3 or 4-bit digital pattern that the instrument will output upon a measurement failing the composite test. 
        /// 
        /// Valid Range:
        ///     0 - 7     when TTL4 Mode is not Digital Output 
        ///     0 - 15    when TTL4 Mode is Digital Output 
        /// 
        /// </param>
        /// <param name="Output_Event">
        /// Pass the event upon which the instrument outputs the result of composite test. 
        /// 
        /// Valid values:
        ///     Measurement Complete -- Output after each sample
        ///     Loop Exited          -- Output after Sample Count samples
        /// 
        /// Default values:
        ///     Loop Exited    
        /// 
        /// </param>
        /// <param name="Reset_Event">
        /// Pass the event upon which the instrument resets the digital output following a composite test. 
        /// 
        /// Valid values:
        ///     Initiate      -- Reset after another task is initiated
        ///     None          -- No reset
        /// 
        /// Default values:
        ///     Initiate    
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureCompositeTestOutput(int Pass_Pattern, int Fail_Pattern, int Output_Event, int Reset_Event)
        {
            int pInvokeResult = PInvoke.ConfigureCompositeTestOutput(this._handle, Pass_Pattern, Fail_Pattern, Output_Event, Reset_Event);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the actual range the SourceMeter is currently using, even while it is auto-ranging.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Actual_Range">
        /// Returns the value of the KE2400_ATTR_AUTO_RANGE_VALUE attribute.
        /// 
        /// The units of the returned value depend on the value of the KE2400_ATTR_FUNCTION attribute.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetAutoRangeValue(out double Actual_Range)
        {
            int pInvokeResult = PInvoke.GetAutoRangeValue(this._handle, out Actual_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns additional information about the state of the instrument. Specifically, it returns the aperture time and the aperture time units.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Aperture_Time">
        /// Returns the value of the KE2400_ATTR_APERTURE_TIME attribute. 
        /// 
        /// The units of this attribute depend on the value of the KE2400_ATTR_APERTURE_TIME_UNITS attribute.
        /// </param>
        /// <param name="Aperture_Time_Units">
        /// Returns the value of the KE2400_ATTR_APERTURE_TIME_UNITS attribute.
        /// 
        /// Valid Return Values:
        /// 
        /// KE2400_VAL_SECONDS - Seconds
        /// KE2400_VAL_POWER_LINE_CYCLES - Powerline cycles
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.         
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetApertureTimeInfo(out double Aperture_Time, out int Aperture_Time_Units)
        {
            int pInvokeResult = PInvoke.GetApertureTimeInfo(this._handle, out Aperture_Time, out Aperture_Time_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Save the current configuration.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Setup_Number">
        /// Setup number
        /// 
        /// Valid Values:
        /// 
        /// KE2400_VAL_SETUP_0      Setup 0
        /// KE2400_VAL_SETUP_1      Setup 1
        /// KE2400_VAL_SETUP_2      Setup 2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///     
        /// This instrument driver also returns errors and warnings defined by other sources.
        /// The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int SaveSetup(int Setup_Number)
        {
            int pInvokeResult = PInvoke.SaveSetup(this._handle, Setup_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Load a saved configuration
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Setup_Number">
        /// Setup number
        /// 
        /// Valid Values:
        /// 
        /// KE2400_VAL_SETUP_0      Setup 0
        /// KE2400_VAL_SETUP_1      Setup 1
        /// KE2400_VAL_SETUP_2      Setup 2
        /// KE2400_VAL_SETUP_PRESET Preset Setup
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///     
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int RecallSetup(int Setup_Number)
        {
            int pInvokeResult = PInvoke.RecallSetup(this._handle, Setup_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Select the setup loaded when the power is turned on.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Setup_Number">
        /// Setup selections
        /// 
        /// Valid Value:
        /// 
        /// KE2400_VAL_SETUP_RESET     Reset
        /// KE2400_VAL_SETUP_PRESET    Preset
        /// KE2400_VAL_SETUP_0         Save 0
        /// KE2400_VAL_SETUP_1         Save 1
        /// KE2400_VAL_SETUP_2         Save 2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///     
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int SelectPowerOnSetup(int Setup_Number)
        {
            int pInvokeResult = PInvoke.SelectPowerOnSetup(this._handle, Setup_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns TRUE if SRQ (Service Request) occur. Otherwise, returns FALSE.
        /// 
        /// Notes:
        /// 
        /// You need to call SRQ to determine when the measurements are completed if you call low level functions such as Fetch Multi-Point, Fetch Multi-Point Char.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Service_Request">
        /// Returned the state (TRUE or FALSE) of the instrument's Service Request.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///     
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Spoll(out bool Service_Request)
        {
            ushort Service_RequestAsUShort;
            int pInvokeResult = PInvoke.Spoll(this._handle, out Service_RequestAsUShort);
            Service_Request = System.Convert.ToBoolean(Service_RequestAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This functions sets the SRQ event enable registers. When an event occurs and the corresponding SRQ enable bit is set, the event is detectable using the KE2400_Spoll function. 
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="condition">
        /// Pass a value for the SRQ event registers. You can enable more than one event using the "or" operator on the following values.
        /// 
        /// Valid values:
        /// 
        /// KE2400_SRQ_ON_ERROR_AVAILABLE     
        /// KE2400_SRQ_ON_MESSAGE_AVAILABLE   
        /// KE2400_SRQ_ON_OPERATION_COMPLETE  
        /// KE2400_SRQ_ON_QUERY_ERROR         
        /// KE2400_SRQ_ON_DEVICE_ERROR        
        /// KE2400_SRQ_ON_EXECUTION_ERROR     
        /// KE2400_SRQ_ON_COMMAND_ERROR       
        /// KE2400_SRQ_ON_USER_REQUEST        
        /// KE2400_SRQ_ON_POWER_ON            
        /// KE2400_SRQ_ON_CALIBRATION_SUMMARY 
        /// KE2400_SRQ_ON_COMMAND_WARNING     
        /// KE2400_SRQ_ON_CALIBRATING         
        /// KE2400_SRQ_ON_WAITING_TRIGGER     
        /// KE2400_SRQ_ON_WAITING_ARM         
        /// KE2400_SRQ_ON_IDLE                
        /// KE2400_SRQ_ON_LOWLIMIT3_FAIL      
        /// KE2400_SRQ_ON_HIGHLIMIT3_FAIL     
        /// KE2400_SRQ_ON_LOWLIMIT2_FAIL      
        /// KE2400_SRQ_ON_HIGHLIMIT2_FAIL     
        /// KE2400_SRQ_ON_LIMITS_PASS         
        /// KE2400_SRQ_ON_READING_AVAILABLE   
        /// KE2400_SRQ_ON_READING_OVERFLOW    
        /// KE2400_SRQ_ON_BUFFER_AVAILABLE    
        /// KE2400_SRQ_ON_BUFFER_FULL         
        /// KE2400_SRQ_ON_INPUT_OVERVOLTAGE   
        /// KE2400_SRQ_ON_INTERLOCK_ASSERTED  
        /// KE2400_SRQ_ON_SOURCE_IN_COMPLIANCE
        /// KE2400_SRQ_ON_CONTACT_CHECK       
        /// KE2400_SRQ_ON_OVER_TEMPERATURE    
        /// KE2400_SRQ_ON_LIMIT1_FAIL         
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSRQEvents(int condition)
        {
            int pInvokeResult = PInvoke.ConfigureSRQEvents(this._handle, condition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enable or disable SQR events.
        /// 
        /// Notes:
        /// 
        /// (1) Enabling SRQ events sets the Measurement Summary Bit (MSB), the Questionable Summary Bit (QSB), the Event Summary Bit (ESB), and the Operation Summary Bit (OSB). 
        /// 
        /// (2) Disabling SRQ events resets all bits of the Service Request Enable Register, the event registers, and the event enable registers.    
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Enable">
        /// Enable or disable SRQ Events
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int EnableSRQEvents(bool Enable)
        {
            int pInvokeResult = PInvoke.EnableSRQEvents(this._handle, System.Convert.ToUInt16(Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a measurement, waits until the SourceMeter has returned to the Idle state, and returns the measured value.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, the Reading parameter contains  an actual reading or a value indicating that an over-range condition occurred.
        /// 
        /// (2) If an over-range condition occurs, the Reading parameter contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001).  
        /// 
        /// (3) You can test the measurement value for over-range with the KE2400_IsOverRange function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the read operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the read operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)            KE2400_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// 
        /// </param>
        /// <param name="Reading">
        /// Returns the measured value.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   AC Volts           - volts
        ///   DC Current         - amperes
        ///   AC Current         - amperes
        ///   2-Wire Resistance  - ohms
        ///   4-Wire Resistance  - ohms
        ///   AC plus DC Volts   - volts
        ///   AC plus DC Current - amperes
        ///   Temperature (C)    - celcius
        ///   Temperature (F)    - Fahrenheit
        ///   Frequency          - hertz
        ///   Period             - seconds
        ///   Diode              - none
        ///   Continuity         - none
        ///   Siemens            - siemens
        ///   Coulombs           - coulombs
        /// 
        /// Notes:
        /// 
        /// (1) If an over-range condition occurs, the Reading parameter contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001).  
        /// 
        /// (2) You can test the measurement value for over-range with the KE2400_IsOverRange function.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Read(int Maximum_Time__ms_, out double Reading)
        {
            int pInvokeResult = PInvoke.Read(this._handle, Maximum_Time__ms_, out Reading);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates the measurement, waits for the SourceMeter to return to the Idle state, and returns an array of measured values.  The number of measurements the SourceMeter takes is determined by the values you specify for the Trigger Count and Sample Count parameters of the KE2400_ConfigureMultiPoint function.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Reading Array parameter is an actual reading or a value indicating that an over-range condition occurred.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001). 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point read operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point read operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)             KE2400_VAL_MAX_TIME_IMMEDIATE (0)           
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Pass the number of elements in the Reading Array parameter.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Reading_Array">
        /// Returns an array of the most recent measurement values.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   AC Volts           - volts
        ///   DC Current         - amperes
        ///   AC Current         - amperes
        ///   2-Wire Resistance  - ohms
        ///   4-Wire Resistance  - ohms
        ///   AC plus DC Volts   - volts
        ///   AC plus DC Current - amperes
        ///   Temperature (C)    - celcius
        ///   Temperature (F)    - Fahrenheit
        ///   Frequency          - hertz
        ///   Period             - seconds
        ///   Diode              - none
        ///   Continuity         - none
        ///   Siemens            - siemens
        ///   Coulombs           - coulombs.
        /// 
        /// Notes:
        /// 
        /// (1) The size of the Reading Array must be at least the size you specify for the Array Size parameter.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001). 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// 
        /// </param>
        /// <param name="Actual_Number_of_Points">
        /// Indicates the number of measured values the function places in the Reading Array parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ReadMultiPoint(int Maximum_Time__ms_, int Array_Size, double[] Reading_Array, out int Actual_Number_of_Points)
        {
            int pInvokeResult = PInvoke.ReadMultiPoint(this._handle, Maximum_Time__ms_, Array_Size, Reading_Array, out Actual_Number_of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates the measurement, waits for the SourceMeter to return to the Idle state, and returns an array of characters. The number of characters that the functions writes into the array is returned via the actualPts parameter.
        /// 
        /// The number of measurements the SourceMeter takes is determined by the values you specify for the Trigger Count and Sample Count parameters of the KE2400_ConfigureMultiPoint function.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Reading Array parameter is an actual reading or a value indicating that an over-range condition occurred.
        /// 
        /// (2) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// 
        /// (3) The application must parse the ASCII data format. Use KE2400_FetchMultiPoint to return binary measurements.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point fetch operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point fetch operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)           KE2400_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Array_Size">
        /// Pass the number of elements in the Reading Array parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Reading_Array">
        /// Returns an array of the most recent measurement values.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Notes:
        /// 
        /// (1) The size of the Reading Array must be at least the size you specify for the Array Size parameter.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE-defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE. 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// 
        /// </param>
        /// <param name="Actual_Number_of_Points">
        /// Indicates the number of characters the function places in the Reading Array parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadMultiPointChar(int Maximum_Time__ms_, int Array_Size, System.Text.StringBuilder Reading_Array, out int Actual_Number_of_Points)
        {
            int pInvokeResult = PInvoke.ReadMultiPointChar(this._handle, Maximum_Time__ms_, Array_Size, Reading_Array, out Actual_Number_of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function acquires the last processed input signal and uses it as a new relative reference value for the relative operation.  The driver sets the KE2400_ATTR_RELATIVE_REFERENCE attribute to this value.
        /// 
        /// You must first have a measurement or call KE2400_Read before calling this function.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// The relative or math operation is filtered out of the processed input signal before the value is acquired.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int AcquireNewRelativeReference()
        {
            int pInvokeResult = PInvoke.AcquireNewRelativeReference(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a measurement.  After you call this function, the SourceMeter leaves the Idle state and waits for a trigger.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Initiate()
        {
            int pInvokeResult = PInvoke.Initiate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sends a command to trigger the SourceMeter.  Call this function if you pass KE2400_VAL_SOFTWARE_TRIG for the Trigger Source parameter of the KE2400_ConfigureTrigger function or the Sample Trigger parameter of the KE2400_ConfigureMultiPoint function.
        /// 
        /// Notes:
        /// 
        /// (1) If both the KE2400_ATTR_TRIGGER_SOURCE and the  KE2400_ATTR_SAMPLE_TRIGGER attributes are not set to the KE2400_VAL_SOFTWARE_TRIG value, this function returns an error.
        /// 
        /// (2) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int SendSoftwareTrigger()
        {
            int pInvokeResult = PInvoke.SendSoftwareTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the value from a previously initiated measurement.
        /// 
        /// You must first call the KE2400_Initiate function to initiate a measurement before calling this function.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, the Reading parameter contains  an actual reading or a value indicating that an over-range condition occurred.
        /// 
        /// (2) If an over-range condition occurs, the Reading parameter contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001).  
        /// 
        /// (3) You can test the measurement value for over-range with the KE2400_IsOverRange function.
        /// 
        /// (4) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the fetch operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the fetch operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)            KE2400_VAL_MAX_TIME_IMMEDIATE (0)       
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// 
        /// </param>
        /// <param name="Reading">
        /// Returns the measured value.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   AC Volts           - volts
        ///   DC Current         - amperes
        ///   AC Current         - amperes
        ///   2-Wire Resistance  - ohms
        ///   4-Wire Resistance  - ohms
        ///   AC plus DC Volts   - volts
        ///   AC plus DC Current - amperes
        ///   Temperature (C)    - celcius
        ///   Temperature (F)    - Fahrenheit
        ///   Frequency          - hertz
        ///   Period             - seconds
        ///   Diode              - none
        ///   Continuity         - none
        ///   Siemens            - siemens
        ///   Coulombs           - coulombs
        /// 
        /// Notes:
        /// 
        /// (1) If an over-range condition occurs, the Reading parameter contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE.  
        /// 
        /// (2) You can test the measurement value for over-range with the KE2400_IsOverRange function.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Fetch(int Maximum_Time__ms_, out double Reading)
        {
            int pInvokeResult = PInvoke.Fetch(this._handle, Maximum_Time__ms_, out Reading);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an array of values from a previously initiated multi-point measurement.  The number of measurements the SourceMeter takes is determined by the values you specify for the Trigger Count and Sample Count parameters of the KE2400_ConfigureMultiPoint function.
        /// 
        /// You must first call the KE2400_Initiate function to initiate a measurement before calling this function.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Reading Array parameter is an actual reading or a value indicating that an over-range condition occurred.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE (0x3FFA2001). 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// 
        /// (4) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point fetch operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point fetch operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)           KE2400_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// Pass the number of elements in the Reading Array parameter.
        /// 
        /// Default Value: None
        /// 
        /// </param>
        /// <param name="Reading_Array">
        /// Returns an array of the most recent measurement values.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   AC Volts           - volts
        ///   DC Current         - amperes
        ///   AC Current         - amperes
        ///   2-Wire Resistance  - ohms
        ///   4-Wire Resistance  - ohms
        ///   AC plus DC Volts   - volts
        ///   AC plus DC Current - amperes
        ///   Temperature (C)    - celcius
        ///   Temperature (F)    - Fahrenheit
        ///   Frequency          - hertz
        ///   Period             - seconds
        ///   Diode              - none
        ///   Continuity         - none
        ///   Siemens            - siemens
        ///   Coulombs           - coulombs.
        /// 
        /// Notes:
        /// 
        /// (1) The size of the Reading Array must be at least the size you specify for the Array Size parameter.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE. 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// 
        /// </param>
        /// <param name="Actual_Number_of_Points">
        /// Indicates the number of measured values the function places in the Reading Array parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int FetchMultiPoint(int Maximum_Time__ms_, int Array_Size, double[] Reading_Array, out int Actual_Number_of_Points)
        {
            int pInvokeResult = PInvoke.FetchMultiPoint(this._handle, Maximum_Time__ms_, Array_Size, Reading_Array, out Actual_Number_of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an array of characters from a previously initiated multi-point measurement. The number of characters that the functions writes into the array is returned via the actualPts parameter.
        /// 
        /// The number of measurements the SourceMeter takes is determined by the values you specify for the Trigger Count and Sample Count parameters of the KE2400_ConfigureMultiPoint function. 
        /// 
        /// You must first call the KE2400_Initiate function to initiate a measurement and wait for the measurement completion before calling this function.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// (1) You can use SRQ to determine when a measurement has completed and data is available before calling this function.
        /// 
        /// (2) This function does not check if an over-range condition occurred.
        /// 
        /// (3) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// 
        /// (4) This function returns the data elements specified by the KE2400_ATTR_BUF_ELEMENTS attributes. The Reading Array should be long enough to hold the selected data elements for all the desired readings. KE2400_ConfigureMultiPoint sets KE2400_ATTR_BUF_ELEMENTS to Reading only. Applications can reset KE2400_ATTR_BUF_ELEMENTS after calling KE2400_ConfigureMultiPoint.
        /// 
        /// (5) The application must parse the ASCII data format. Use KE2400_FetchMultiPoint to return binary measurements, which do not require parsing.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point fetch operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point fetch operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)           KE2400_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Array_Size">
        /// Pass the number of elements in the Reading Array parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Reading_Array">
        /// Returns an array of the most recent measurement values.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Notes:
        /// 
        /// (1) The size of the Reading Array must be at least the size you specify for the Array Size parameter.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE. 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// </param>
        /// <param name="Actual_Number_of_Points">
        /// Indicates the number of characters the function places in the Reading Array parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int FetchMultiPointChar(int Maximum_Time__ms_, int Array_Size, System.Text.StringBuilder Reading_Array, out int Actual_Number_of_Points)
        {
            int pInvokeResult = PInvoke.FetchMultiPointChar(this._handle, Maximum_Time__ms_, Array_Size, Reading_Array, out Actual_Number_of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function aborts a previously initiated measurement and returns the SourceMeter to the Idle state.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions.  The sequence performs one operation.  You use the low-level functions to optimize one or more aspects of interaction with the instrument.  If you want to check the instrument status, call the KE2400_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///    No custom warnings for this function.
        /// 
        /// ERRORS:
        ///    No custom warnings for this function.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Abort()
        {
            int pInvokeResult = PInvoke.Abort(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function takes a measurement value that you obtain from one of the Measure, Read, or Fetch functions and determines if the value is a valid measurement value or a value indicating an over-range condition occurred.  
        /// 
        /// Notes:
        /// 
        /// (1) If an over-range condition occurs, the measurement value contains an IEEE defined NaN (Not a Number) value.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Measurement_Value">
        /// Pass the measurement value that you obtain from one of the Measure, Read, or Fetch functions.  The driver tests this value to determine if the value is a valid measurement value or a value indicating an over-range condition occurred.  
        /// 
        /// Default Value: None
        /// 
        /// Notes:
        /// 
        /// (1) If an over-range condition occurs, the measurement value contains an IEEE defined NaN (Not a Number) value indicating that an over-range occurred.
        /// 
        /// </param>
        /// <param name="Is_Over_Range">
        /// Returns whether the measurement value is a valid measurement or a value indicating an over-range condition.
        /// 
        /// Valid values:
        /// VI_TRUE  (1) - The value indicates that an over-range condition   
        ///                occurred.
        /// VI_FALSE (0) - The value is a valid measurement.
        /// 
        /// Notes:
        /// 
        /// (1) If an over-range condition occurs, the measurement value contains an IEEE defined NaN (Not a Number) floating point value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int IsOverRange(double Measurement_Value, out bool Is_Over_Range)
        {
            ushort Is_Over_RangeAsUShort;
            int pInvokeResult = PInvoke.IsOverRange(this._handle, Measurement_Value, out Is_Over_RangeAsUShort);
            Is_Over_Range = System.Convert.ToBoolean(Is_Over_RangeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retrieves the result of the statistic calculation operation on the multi-point measurement.  The trigger count and/or sample count should be greater than 1 before this function is called.
        /// 
        /// You must first call the KE2400_Initiate function to initiate a multi-point measurement and wait for the measurement completion before calling this function.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// (1) You can use SRQ to determine when a measurement has completed and data is available before calling this function.
        /// 
        /// (2) If an over-range condition occurs, the Data parameter contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE.  
        /// 
        /// (3) You can test the data value for over-range with the KE2400_IsOverRange function.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Max_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point fetch stat operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point fetch stat operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE             KE2400_VAL_MAX_TIME_IMMEDIATE           
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The driver uses 10% of the maximum waiting time to repeatedly poll the instrument for operation complete. Setting this parameter to an unreasonably large value will unnecessarily delay the return from this function.
        /// 
        /// (2) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Data">
        /// Returns the results of the statistic calculation operation.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///    
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int FetchStatistics(int Max_Time__ms_, out double Data)
        {
            int pInvokeResult = PInvoke.FetchStatistics(this._handle, Max_Time__ms_, out Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retrieves the results of the compliance, contact and limit tests.  After getting the results of the test, this function will clear the limit test result register, if any.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Test_Index">
        /// Pass the index number of the test. 
        /// 
        /// Valid Values:
        /// 
        ///             1 - limit 1 test
        ///             2 - limit 2 test
        ///             3 - limit 3 test 
        ///             4 - contact check test
        /// </param>
        /// <param name="Test_Status">
        /// Returns whether any readings has failed the lower limit of the limit 1 test. Limit test can fail an upper or lower limit. However, such details are only available for limit tests 2 and 3. 
        /// 
        /// Valid Returns:
        ///   KE2400_VAL_TEST_PASSED             - Test passed 
        ///                                          (0)
        ///   KE2400_VAL_TEST_FAILED             - Test failed 
        ///                                          (0x80000001)
        /// 
        /// Valid Returns (when limit test details are available):
        ///   KE2400_VAL_TEST_FAILED_LOWER_LIMIT - Test failed lower limit
        ///                                          (0x8000000)
        ///   KE2400_VAL_TEST_PASSED             - Test passed 
        ///                                          (0)
        ///   KE2400_VAL_TEST_FAILED_UPPER_LIMIT - Test failed upper limit
        ///                                          (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int FetchTestStatus(int Test_Index, out int Test_Status)
        {
            int pInvokeResult = PInvoke.FetchTestStatus(this._handle, Test_Index, out Test_Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Bias source generator for a SourceMeter. The parameters specify the source function, range. level, compliance limit and standby mode. The standby mode is the state of the output source when measurement with Bias is complete. 
        /// 
        /// Use the EnableSource() function to arm this source generator for use during measurement or for immediate use.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Function">
        /// Pass the function that the source regulates. The instruments regulates this function at a constant value until the complementary function reaches its limit. The value of this parameter determines the units of the Range, Level and Compliance Limit parameters. (The Compliance Limit is in the units of the complementary function.)
        /// 
        /// Valid values:
        ///     DC Volts      (volts)
        ///     DC Current    (amps)
        /// 
        /// Default value:
        ///     DC Volts
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// Pass the output range you want to use for this source generator. The units and range depend on the source function.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to   1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to  63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  10.5                  
        ///      10.5    to  42.0                  
        ///                                        
        ///      
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///      0.0      to   1.05e-6 
        ///      1.05e-6  to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///       0.0     to   1.05e-6     
        ///       1.05e-6 to  10.5e-6      
        ///      10.5e-6  to 105.0e-6      
        ///     105.0e-6  to   1.05e-3     
        ///       1.05e-3 to  21.0e-3      
        ///      21.0e-3  to 105.0e-3      
        ///     105.0e-3  to   1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///       0.0     to  10.5e-6 
        ///      10.5e-6  to 105.0e-6 
        ///     105.0e-6  to   1.05e-3
        ///       1.05e-3 to  10.5e-3 
        ///      10.5e-3  to 105.0e-3 
        ///     105.0e-3  to   1.05   
        ///       1.05    to   3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to  10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to   5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///       0.0      to   1.05e-12     
        ///       1.05e-12 to   10.5e-12     
        ///      10.5e-12  to  105.0e-12     
        ///     105.0e-12  to    1.05e-9     
        ///       1.05e-9  to  10.5e-9       
        ///      
        /// 
        /// </param>
        /// <param name="Level">
        /// Pass the value for the instrument to regulate for this source generator. The valid range is +/- the range setting.
        /// 
        /// Valid range (max):
        ///     -1050 to 1050
        /// 
        /// </param>
        /// <param name="Compliance_Limit">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the range parameter.)
        /// 
        /// </param>
        /// <param name="Standby_Mode">
        /// Pass the value for the standby mode of source to use if this source generator is active when a measurement task completes. 
        /// 
        /// Valid values:
        ///     Last          -- Maintains the last source value
        ///     Off           -- Alias for the most quiesent state (High Z)
        ///     High Impedance-- Opens output relay
        ///     Normal        -- Regulates output at 0V
        ///     Zero          -- Regulates output at 0V 
        ///     Guard         -- Regulates output at 0A
        /// 
        /// Note:
        /// 
        /// Normal, Zero and Guard have different effects on the source limit. See the instrument manual for details.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceBias(int Function, double Range, double Level, double Compliance_Limit, int Standby_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureSourceBias(this._handle, Function, Range, Level, Compliance_Limit, Standby_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the DC source generator for a SourceMeter. The parameters specify the source function, range. level, pulsing, compliance limit and standby mode. The standby mode is the state of the output source when measurement with DC source is complete. 
        /// 
        /// Use the EnableSource() function to arm this source generator for use during measurement or for immediate use.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Function">
        /// Pass the function that the source regulates. The instruments regulates this function at a constant value until the complementary function reaches its limit. The value of this parameter determines the units of the Range, Level and Compliance Limit parameters. (The Compliance Limit is in the units of the complementary function.)
        /// 
        /// Valid values:
        ///     DC Volts      (volts)
        ///     DC Current    (amps)
        /// 
        /// Default value:
        ///     DC Volts
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// Pass the output range you want to use for this source generator. The units and range depend on the source function.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to   1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to  63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  10.5                  
        ///      10.5    to  42.0                  
        ///                                        
        ///      
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///      0.0      to   1.05e-6 
        ///      1.05e-6  to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///       0.0     to   1.05e-6     
        ///       1.05e-6 to  10.5e-6      
        ///      10.5e-6  to 105.0e-6      
        ///     105.0e-6  to   1.05e-3     
        ///       1.05e-3 to  21.0e-3      
        ///      21.0e-3  to 105.0e-3      
        ///     105.0e-3  to   1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///       0.0     to  10.5e-6 
        ///      10.5e-6  to 105.0e-6 
        ///     105.0e-6  to   1.05e-3
        ///       1.05e-3 to  10.5e-3 
        ///      10.5e-3  to 105.0e-3 
        ///     105.0e-3  to   1.05   
        ///       1.05    to   3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to  10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to   5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///       0.0      to   1.05e-12     
        ///       1.05e-12 to   10.5e-12     
        ///      10.5e-12  to  105.0e-12     
        ///     105.0e-12  to    1.05e-9     
        ///       1.05e-9  to  10.5e-9       
        ///      
        /// 
        /// </param>
        /// <param name="Level">
        /// Pass the value for the instrument to regulate for this source generator. The valid range is +/- the range setting.
        /// 
        /// Valid range (max):
        ///     -1050 to 1050
        /// 
        /// </param>
        /// <param name="Enable_Pulsing">
        /// Pass a value to enable pulsing of the source output between each measurement. The source alternates between its programmed level and its selected standby mode.
        /// 
        /// Default value:
        ///     False
        /// 
        /// 
        /// Note:
        ///     If pulsing is used, the standby mode cannot be Last.
        /// 
        /// 
        /// </param>
        /// <param name="Compliance_Limit">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the range parameter.)
        /// </param>
        /// <param name="Standby_Mode">
        /// Pass the value for the standby mode of source to use if this source generator is active when a measurement task completes. 
        /// 
        /// Valid values:
        ///     Last          -- Maintains the last source value
        ///     Off           -- Alias for the most quiesent state (High Z)
        ///     High Impedance-- Opens output relay
        ///     Normal        -- Regulates output at 0V
        ///     Zero          -- Regulates output at 0V 
        ///     Guard         -- Regulates output at 0A
        /// 
        /// Note:
        /// 
        /// Normal, Zero and Guard have different effects on the source limit. See the instrument manual for details.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceDC(int Function, double Range, double Level, bool Enable_Pulsing, double Compliance_Limit, int Standby_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureSourceDC(this._handle, Function, Range, Level, System.Convert.ToUInt16(Enable_Pulsing), Compliance_Limit, Standby_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Ramp source generator for a SourceMeter. The parameters specify the source function, range. ramp mode, start level, stop level, step count, pulsing, compliance limit and standby mode. The standby mode is the state of the output source when the ramp is complete. 
        /// 
        /// Use the EnableSource() function to arm this source generator for use during measurement.
        /// 
        /// Notes:
        ///    (1) Use the StepCount() utility function to calculate the number of steps from a start and stop level and step size.
        ///        
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Function">
        /// Pass the function that the source regulates. The instruments regulates this function at a constant value until the complementary function reaches its limit. The value of this parameter determines the units of the Range, Start level, Stop level and Compliance Limit parameters. (The Compliance Limit is in the units of the complementary function.)
        /// 
        /// Valid values:
        ///     DC Volts      (volts)
        ///     DC Current    (amps)
        /// 
        /// Default value:
        ///     DC Volts
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// Pass the output range you want to use for this source generator. The units and range depend on the source function.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to   1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to  63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  10.5                  
        ///      10.5    to  42.0                  
        ///                                        
        ///      
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///      0.0      to   1.05e-6 
        ///      1.05e-6  to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///       0.0     to   1.05e-6     
        ///       1.05e-6 to  10.5e-6      
        ///      10.5e-6  to 105.0e-6      
        ///     105.0e-6  to   1.05e-3     
        ///       1.05e-3 to  21.0e-3      
        ///      21.0e-3  to 105.0e-3      
        ///     105.0e-3  to   1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///       0.0     to  10.5e-6 
        ///      10.5e-6  to 105.0e-6 
        ///     105.0e-6  to   1.05e-3
        ///       1.05e-3 to  10.5e-3 
        ///      10.5e-3  to 105.0e-3 
        ///     105.0e-3  to   1.05   
        ///       1.05    to   3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to  10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to   5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///       0.0      to   1.05e-12     
        ///       1.05e-12 to   10.5e-12     
        ///      10.5e-12  to  105.0e-12     
        ///     105.0e-12  to    1.05e-9     
        ///       1.05e-9  to  10.5e-9       
        ///      
        /// 
        /// </param>
        /// <param name="RampMode">
        /// Pass the spacing mode for the ramp. The spacing mode determines how the ramp source values change from point to point.
        /// 
        /// Valid values:
        ///     KE2400_VAL_LINEAR
        ///     KE2400_VAL_LOG
        /// 
        /// </param>
        /// <param name="Start">
        /// Pass the value for the instrument to regulate at the first step for this source generator. The valid range is +/- the range setting. 
        /// 
        /// Valid range (max):
        ///     -1050 to 1050
        /// 
        /// 
        /// Note: the values for steps between the first and last are calculated from the start and stop levels and the number of steps. 
        /// 
        /// </param>
        /// <param name="Stop">
        /// Pass the value for the instrument to regulate at the last step for this source generator. The valid range is +/- the range setting. 
        /// 
        /// Valid range (max):
        ///     -1050 to 1050
        /// 
        /// 
        /// Note: the values for steps between the first and last are calculated from the start and stop levels and the number of steps. 
        /// 
        /// </param>
        /// <param name="Step_Count">
        /// 
        /// </param>
        /// <param name="Enable_Pulsing">
        /// Pass a value to enable pulsing of the source output between each measurement. The source alternates between its programmed level and its selected standby mode.
        /// 
        /// Default value:
        ///     False
        /// 
        /// 
        /// Note:
        ///     If pulsing is used, the standby mode cannot be Last.
        /// 
        /// 
        /// </param>
        /// <param name="Compliance_Limit">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the range parameter.)
        /// 
        /// </param>
        /// <param name="Standby_Mode">
        /// Pass the value for the standby mode of source to use if this source generator is active when a measurement task completes. 
        /// 
        /// Valid values:
        ///     Last          -- Maintains the last source value
        ///     Off           -- Alias for the most quiesent state (High Z)
        ///     High Impedance-- Opens output relay
        ///     Normal        -- Regulates output at 0V
        ///     Zero          -- Regulates output at 0V 
        ///     Guard         -- Regulates output at 0A
        /// 
        /// Note:
        /// 
        /// Normal, Zero and Guard have different effects on the source limit. See the instrument manual for details.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceRamp(int Function, double Range, int RampMode, double Start, double Stop, int Step_Count, bool Enable_Pulsing, double Compliance_Limit, int Standby_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureSourceRamp(this._handle, Function, Range, RampMode, Start, Stop, Step_Count, System.Convert.ToUInt16(Enable_Pulsing), Compliance_Limit, Standby_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Custom Waveform source generator for a SourceMeter. The parameters specify the source function, range. levelsArraySize, levels, pulsing, compliance limit and standby mode. The standby mode is the state of the output source when the ramp is complete. 
        /// 
        /// Use the EnableSource() function to arm this source generator for use during measurement.
        /// 
        /// 
        /// Note: Trigger count should be set to the levelsArraySize so that the wave form will complete when the measurement completes.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Function">
        /// Pass the function that the source regulates. The instruments regulates this function at a constant value until the complementary function reaches its limit. The value of this parameter determines the units of the Range, Levels and Compliance Limit parameters. (The Compliance Limit is in the units of the complementary function.)
        /// 
        /// Valid values:
        ///     DC Volts      (volts)
        ///     DC Current    (amps)
        /// 
        /// Default value:
        ///     DC Volts
        /// 
        /// 
        /// </param>
        /// <param name="Range">
        /// Pass the output range you want to use for this source generator. The units and range depend on the source function.
        /// 
        /// Valid Range for DC Volts (Model 2400, Model 6430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 210.0                  
        /// 
        /// Valid Range for DC Volts (Model 2410):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to   1.05e3               
        /// 
        /// Valid Range for DC Volts (Model 2420):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to  63.0                  
        /// 
        /// Valid Range for DC Volts (Model 2425, Model 2430):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  21.0                  
        ///      21.0    to 105.0                  
        /// 
        /// Valid Range for DC Volts (Model 2440):
        ///       0.0    to 210.0e-3               
        ///     210.0e-3 to   2.1                  
        ///       2.1    to  10.5                  
        ///      10.5    to  42.0                  
        ///                                        
        ///      
        /// 
        /// Valid Range for DC Current (Model 2400, Model 2425):
        ///      0.0      to   1.05e-6 
        ///      1.05e-6  to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        /// 
        /// Valid Range for DC Current (Model 2410):
        ///       0.0     to   1.05e-6     
        ///       1.05e-6 to  10.5e-6      
        ///      10.5e-6  to 105.0e-6      
        ///     105.0e-6  to   1.05e-3     
        ///       1.05e-3 to  21.0e-3      
        ///      21.0e-3  to 105.0e-3      
        ///     105.0e-3  to   1.05        
        ///      
        /// Valid Range for DC Current (Model 2420):
        ///       0.0     to  10.5e-6 
        ///      10.5e-6  to 105.0e-6 
        ///     105.0e-6  to   1.05e-3
        ///       1.05e-3 to  10.5e-3 
        ///      10.5e-3  to 105.0e-3 
        ///     105.0e-3  to   1.05   
        ///       1.05    to   3.15   
        ///      
        /// Valid Range for DC Current (Model 2430):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to  10.5     
        ///      
        /// Valid Range for DC Current (Model 2440):
        ///       0.0     to  10.5e-6  
        ///      10.5e-6  to 105.0e-6  
        ///     105.0e-6  to   1.05e-3 
        ///       1.05e-3 to  10.5e-3  
        ///      10.5e-3  to 105.0e-3  
        ///     105.0e-3  to   1.05    
        ///       1.05    to   5.25    
        ///      
        /// Valid Range for DC Current (Model 6430):
        ///       0.0      to   1.05e-12     
        ///       1.05e-12 to   10.5e-12     
        ///      10.5e-12  to  105.0e-12     
        ///     105.0e-12  to    1.05e-9     
        ///       1.05e-9  to  10.5e-9       
        ///      
        /// 
        /// </param>
        /// <param name="LevelsArraySize">
        /// Pass the number of elements in the Levels array. 
        /// 
        /// Valid Range:
        ///     1 to 100.
        /// 
        /// 
        /// </param>
        /// <param name="Levels">
        /// Pass the value for the instrument to regulate at each step for this source generator. This parameter is an array of double-precision float-point values. The valid range is +/- the range setting. 
        /// 
        /// Valid range (max):
        ///     -1050 to 1050
        /// 
        /// </param>
        /// <param name="Enable_Pulsing">
        /// Pass a value to enable pulsing of the source output between each measurement. The source alternates between its programmed level and its selected standby mode.
        /// 
        /// Default value:
        ///     False
        /// 
        /// 
        /// Note:
        ///     If pulsing is used, the standby mode cannot be Last.
        /// 
        /// 
        /// </param>
        /// <param name="Compliance_Limit">
        /// Pass the value for the instrument to limit the source output. While regulating the specified function, the instrument will not allow the complementary function to exceed this limit. Valid values are in the range +/- the maximum range of the complementary source function. (See the range parameter.)
        /// 
        /// </param>
        /// <param name="Standby_Mode">
        /// Pass the value for the standby mode of source to use if this source generator is active when a measurement task completes. 
        /// 
        /// Valid values:
        ///     Last          -- Maintains the last source value
        ///     Off           -- Alias for the most quiesent state (High Z)
        ///     High Impedance-- Opens output relay
        ///     Normal        -- Regulates output at 0V
        ///     Zero          -- Regulates output at 0V 
        ///     Guard         -- Regulates output at 0A
        /// 
        /// Note:
        /// 
        /// Normal, Zero and Guard have different effects on the source limit. See the instrument manual for details.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceCustom(int Function, double Range, int LevelsArraySize, double[] Levels, bool Enable_Pulsing, double Compliance_Limit, int Standby_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureSourceCustom(this._handle, Function, Range, LevelsArraySize, Levels, System.Convert.ToUInt16(Enable_Pulsing), Compliance_Limit, Standby_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the SourceMeter source safety interlock. 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Enabled">
        /// Pass the source interlock mode.
        /// 
        /// Valid values:
        ///     True   -- Source does not operate if interlock is not satisfied
        ///     False  -- Source operates indepedently of interlock
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ConfigureSourceInterlock(bool Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureSourceInterlock(this._handle, System.Convert.ToUInt16(Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the over-voltage protection limit for current-sourcing tasks.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Limit">
        /// Pass the absolute value of the overvoltage protection limit for the voltage source.  
        /// 
        /// Valid values (Model 2400, Model 6430): 
        ///     20V, 40V, 60V, 80V, 100V, 120V, 160V, &gt;160V (NONE)
        /// 
        /// Valid values (Model 2410):
        ///    20V, 40V, 100V, 200V, 300V, 400V, 500V, &gt;500V (NONE) 
        /// 
        /// Valid values (Model 2420):
        ///     6V, 12V, 18V, 24V, 30V, 36V, 48V, &gt;48V (NONE) 
        /// 
        /// Valid values (Model 2425, Model 2430):
        ///     10V, 20V, 30V, 40V, 50V, 60V, 80V, &gt;80V (NONE) 
        /// 
        /// Valid values (Model 2440):
        ///     4V, 8V, 12V, 16V, 20V, 24V, 32V, &gt;40V (NONE) 
        /// 
        /// Default value:
        ///     501V
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureOverVoltageProtection(double Limit)
        {
            int pInvokeResult = PInvoke.ConfigureOverVoltageProtection(this._handle, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enable source generator for use during measurements or immediate use. Each generator is controlled separately but a generator may have multiple settings. 
        /// 
        /// To enable or disable a generator for use during measurements, call EnableSource with the generator type and Auto Sync Enabled or Auto Sync Disabled. 
        /// 
        /// To control a source generator immediately, call EnableSource with the generator type and Immdiate On or Immediate Off. 
        /// 
        /// Notes:
        ///    (1) On the 2400 Series, only one generator have Auto Sync Enabled  upon the commencement of measurements.
        ///    (2) On the 2400 Series, the source cannot be enabled or disabled while a measurement task is in progress. To abort a measurement and turn off the source, use the Disable() function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Generator">
        /// Specify a source generator to enable or disable.
        /// 
        /// Valid values:
        ///     KE2400_VAL_SOURCE_BIAS
        ///     KE2400_VAL_SOURCE_CUSTOM
        ///     KE2400_VAL_SOURCE_DC
        ///     KE2400_VAL_SOURCE_RAMP
        /// </param>
        /// <param name="Output_Action">
        /// Specify an action state for the source generator
        /// 
        /// To enable or disable a generator for use during measurements, call EnableSource with the generator type and Auto Sync Enabled or Auto Sync Disabled. 
        /// 
        /// To control a source generator immediately, call EnableSource with the generator type and Immdiate On or Immediate Off. (To control all source generators immediately, use ControlSource.)
        /// 
        /// 
        /// Valid values (sum of zero or one Immediate and zero or one Auto Sync):
        ///     KE2400_VAL_IMMEDIATE_OFF
        ///     KE2400_VAL_IMMEDIATE_ON
        ///     KE2400_VAL_IMMEDIATE_STANDBY
        ///     KE2400_VAL_AUTO_SYNC_ENABLED
        ///     KE2400_VAL_AUTO_SYNC_DISABLED
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int EnableSource(int Generator, int Output_Action)
        {
            int pInvokeResult = PInvoke.EnableSource(this._handle, Generator, Output_Action);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function provides immediate control over the SourceMeter  source.
        /// 
        /// Notes:
        ///    (1) This function does not affect a measurement task in progress.  
        /// 
        ///    (2) To abort a measurement and immediately turn off the source use KE2400_Disable(). 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Output_State">
        /// Pass the output state of the source.
        /// 
        /// Valid values:
        ///     Off           -- Alias for the most quiesent state (High Z)
        ///     High Impedance-- Opens output relay
        ///     Normal        -- Regulates output at 0V
        ///     Zero          -- Regulates output at 0V 
        ///     Guard         -- Regulates output at 0A
        /// 
        /// Note:
        /// 
        /// Normal, Zero and Guard have different effects on the source limit. See the instrument manual for details.
        /// 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///  
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ControlSource(int Output_State)
        {
            int pInvokeResult = PInvoke.ControlSource(this._handle, Output_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears all program steps. It has no effect on the the 2400 Series instruments because on these instruments, programs run through the number of steps determined by the trigger and sample counts.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ProgramClear()
        {
            int pInvokeResult = PInvoke.ProgramClear(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves the instrument's current configuration into the specified program step.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Location">
        /// Pass the step number for which to store the configuration.
        /// 
        /// Valid values:
        ///     1 to 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ProgramSaveStep(int Location)
        {
            int pInvokeResult = PInvoke.ProgramSaveStep(this._handle, Location);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures a program branch to one of two steps based on the outcome of a specified test. The test is executed when the program reaches the step location to which the configuration is saved with the ProgramSaveStep function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Test_Type">
        /// Pass the type of test to determine which program branch to take.
        /// 
        /// Valid values:
        ///     Composite Test
        /// 
        /// </param>
        /// <param name="Location_On_Pass">
        /// Pass the step number to branch to upon a pass.
        /// 
        /// Valid values:
        ///     1 to 100
        /// 
        /// </param>
        /// <param name="Location_On_Fail">
        /// Pass the step number to branch to upon a fail.
        /// 
        /// Valid values:
        ///     1 to 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ProgramBranch(int Test_Type, int Location_On_Pass, int Location_On_Fail)
        {
            int pInvokeResult = PInvoke.ProgramBranch(this._handle, Test_Type, Location_On_Pass, Location_On_Fail);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function recalls a saved program step into the instrument's current configuration.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Location">
        /// Pass the step number for which to recall the configuration.
        /// 
        /// Valid values:
        ///     1 to 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ProgramRecallStep(int Location)
        {
            int pInvokeResult = PInvoke.ProgramRecallStep(this._handle, Location);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a previously configured onboard program, starting a the specified step. 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Start_Location">
        /// Pass the step number at which to initiate the program.
        /// 
        /// Valid values:
        ///     1 to 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ProgramInitiate(int Start_Location)
        {
            int pInvokeResult = PInvoke.ProgramInitiate(this._handle, Start_Location);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state and sends initialization commands to the instrument.  The initialization commands set instrument settings such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s). 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test.  Zero means success.  For any other code, see the device's operator's manual.
        /// 
        /// Self-Test Code    Description
        /// ---------------------------------------
        ///    0              Passed self test
        ///    1              Self test failed
        /// 
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// Returns the self-test response string from the instrument. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument and applies initial user specified settings from the Logical Name which was used to initialize the session.  If the session was created without a Logical Name, this function is equivalent to the KE2400_reset function.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm   Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm   Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function places the instrument in a quiescent state as quickly as possible.  In a quiescent state, an instrument has no or minimal effect on the external system to which it is connected.
        /// 
        /// This function calls the Abort function. In addition, the source is turned off.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Instrument_Driver_Revision">
        /// Returns the instrument driver software revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <param name="Firmware_Revision">
        /// Returns the instrument firmware revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code and a message from the instrument's error queue.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Error_Code">
        /// Returns the error code read from the instrument's error queue.
        /// 
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// Returns the error message string read from the instrument's error message queue.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.         
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function invalidates the cached values of all attributes for the session.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm   Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm   Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int InvalidateAllAttributes()
        {
            int pInvokeResult = PInvoke.InvalidateAllAttributes(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function plays a tone of the specified frequency and duration. It does this by setting the following attributes:
        ///     KE2400_ATTR_TONE_FREQUENCY
        ///     KE2400_ATTR_TONE_DURATION
        ///     KE2400_ATTR_TONE_PLAY
        /// 
        /// Note:
        ///    The instrument does not wait for a tone to finish if it is commanded to start another. 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Frequency">
        /// Pass the frequency for the tone. The driver sets the KE2400_ATTR_TONE_FREQUENCY attribute to this value.
        /// 
        /// Valid range:
        ///     65 to 2e6 Hz
        /// 
        /// </param>
        /// <param name="Duration">
        /// Pass the duration of the tone. The driver sets the KE2400_ATTR_TONE_DURATION attribute to this value.
        /// 
        /// Valid range:
        ///     0 to 7.9 sec
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int PlayTone(double Frequency, double Duration)
        {
            int pInvokeResult = PInvoke.PlayTone(this._handle, Frequency, Duration);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the error information for the current execution thread and the IVI session you specify.  If you pass VI_NULL for the Instrument Handle parameter, this function clears the error information only for the current execution thread. 
        /// 
        /// The error information includes a primary error code, secondary error code, and an error elaboration string.  For a particular session, this information is the same as the values held in the following attributes:
        /// 
        /// KE2400_ATTR_PRIMARY_ERROR
        /// KE2400_ATTR_SECONDARY_ERROR
        /// KE2400_ATTR_ERROR_ELABORATION
        /// 
        /// This function sets the primary and secondary error codes to VI_SUCCESS (0), and sets the error elaboration string to "".
        /// 
        /// The IVI Library also maintains this error information separately for each thread.  This is useful if you do not have a session handle to pass to KE2400_ClearErrorInfo or KE2400_GetErrorInfo, which occurs when a call to KE2400_init or KE2400_InitWithOptions fails.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ClearErrorInfo()
        {
            int pInvokeResult = PInvoke.ClearErrorInfo(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coercion information associated with the IVI session.  This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.
        /// 
        /// If you set the KE2400_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the instrument driver keeps a list of all coercions it makes on ViInt32 or ViReal64 values you pass to instrument driver functions.  You use this function to retrieve information from that list.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// The function returns an empty string in the Coercion Record parameter if no coercion records remain for the session.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Coercion Record parameter.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// 
        /// </param>
        /// <param name="Coercion_Record">
        /// Returns the next coercion record for the IVI session.  If there are no coercion records, the function returns an empty string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter.  If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no coercion records remain for the session.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// If the current value of the return buffer, including the terminating NUL byte, is larger than the size you indicate in the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning.  Interchangeability warnings indicate that using your application with a different instrument might cause different behavior. You use this function to retrieve interchangeability warnings.
        /// 
        /// The driver performs interchangeability checking when the KE2400_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.
        /// 
        /// The function returns an empty string in the Interchange Warning parameter if no interchangeability warnings remain for the session.
        /// 
        /// In general, the instrument driver generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Interchange Warning parameter.
        /// 
        /// If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Interchange Warning buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Interchange_Warning">
        /// Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty  string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no interchangeability
        /// warnings remain for the session.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm   Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm   Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the list of current interchange warnings.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm   Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm   Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order.  To do so requires ensuring that each test module completely configures the state of each instrument it uses.  If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module.  If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.  This change in behavior is generally instrument specific and represents an interchangeability problem.
        /// 
        /// You can use this function to test for such cases.  After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations.  By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.
        /// 
        /// This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings.  If you want to guarantee that the KE2400_GetNextInterchangeWarning function only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.  You can clear the interchangeability warnings list by repeatedly calling the KE2400_GetNextInterchangeWarning function until no more interchangeability warnings are returned.  If you are not interested in the content of those warnings, you can call the KE2400_ClearInterchangeWarnings function.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm   Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm   Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a user-specified string to the instrument.
        /// 
        /// Note:  This function bypasses IVI attribute state caching.  Therefore, when you call this function, the cached values for all attributes will be invalidated.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Write_Buffer">
        /// Pass the string to be written to the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int WriteInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.WriteInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Number_of_Bytes_To_Read">
        /// Pass the maximum number of bytes to read from the instruments.  
        /// 
        /// Valid Range:  0 to the number of elements in the Read Buffer.
        /// 
        /// Default Value:  0
        /// 
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// After this function executes, this parameter contains the data that was read from the instrument.
        /// </param>
        /// <param name="Num_Bytes_Read">
        /// Returns the number of bytes actually read from the instrument and stored in the Read Buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///     No custom warnings for this function.
        /// 
        /// ERRORS:
        ///     No custom errors for this function.
        ///                     
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int ReadInstrData(int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read)
        {
            int pInvokeResult = PInvoke.ReadInstrData(this._handle, Number_of_Bytes_To_Read, Read_Buffer, out Num_Bytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function opens an I/O session and connects to the instrument without initializing the instrument.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// (1) The instrument session must be closed before calling this function.
        /// 
        /// (2) This is a low-level, special purpose function for use with KE2400_GetBufferInfo, KE2400_FetchBufferData, and KE2400_Disconnect to read the contents of the instrument's buffer after a power cycle or when the client application is trying to recover data after a software malfunction.
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// GPIB[board]::&lt;primary address&gt;[::secondary address]::INSTR
        /// VXI[board]::&lt;logical address&gt;::INSTR
        /// GPIB-VXI[board]::&lt;logical address&gt;::INSTR
        /// ASRL&lt;port&gt;::INSTR
        /// &lt;LogicalName&gt;
        /// [VInstr-&gt;]&lt;VirtualInstrument&gt;
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// board - 0
        /// secondary address - none (31)
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
        ///                     secondary address
        /// "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
        ///                        secondary address 5
        /// "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
        ///                         secondary address 5
        /// "VXI::64::INSTR" - VXI board 0, logical address 64
        /// "VXI1::64::INSTR" - VXI board 1, logical address 64
        /// "GPIB-VXI::64::INSTR" - GPIB-VXI board 0, logical address 64
        /// "GPIB-VXI1::64::INSTR" - GPIB-VXI board 1, logical address 64
        /// "ASRL2::INSTR" - COM port 2
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "VInstr-&gt;xyz432" - Virtual Instrument "xyz432"
        /// "xyz432" - Logical Name or Virtual Instrument "xyz432"
        /// 
        /// 
        /// Default Value:  "GPIB::14::INSTR"
        /// 
        /// Note: You specify the resource name with the "VInstr-&gt;" if you have the logical name that is the same as the virtual instrument name and you want to explicitly use the virtual instrument name. Otherwise, the driver uses the logical name.
        /// </param>
        /// <param name="Instrument_Handle">
        /// Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Notes:
        /// 
        /// (1) This function creates a new session each time you invoke it.  This is useful if you have multiple physical instances of the same type of instrument.  
        /// 
        /// (2) Avoid creating multiple concurrent sessions to the same physical instrument.  Although you can create more than one IVI session for the same resource, it is best not to do so.  A better approach is to use the same IVI session in multiple execution threads.  You can use functions KE2400_LockSession and KE2400_UnlockSession to protect sections of code that require exclusive access to the resource.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// No defined status codes.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int Reconnect(string Resource_Name)
        {
            int pInvokeResult = PInvoke.Reconnect(Resource_Name, out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns number of readings and timestamp format stored in the instrument's buffer for use by the KE2400_FetchBufferData function.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// (1) This is a low-level, special purpose function for use with KE2400_GetBufferInfo, KE2400_FetchBufferData, and KE2400_Disconnect to read the contents of the instrument's buffer after a power cycle or when the client application is trying to recover data after a software malfunction.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Timestamp_Type">
        /// Returns the type of timestamps stored with buffer readings.
        /// 
        /// Returned values:
        ///       KE2400_VAL_TIMESTAMP_ABS    - Absolute timestamp
        ///       KE2400_VAL_TIMESTAMP_DELTA  - Delta timestamp
        /// 
        /// </param>
        /// <param name="Sample_Count">
        /// Returns the total number of readings in the instrument buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///    None.
        /// 
        /// ERRORS:
        ///    None.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int GetBufferInfo(out int Timestamp_Type, out int Sample_Count)
        {
            int pInvokeResult = PInvoke.GetBufferInfo(this._handle, out Timestamp_Type, out Sample_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fetches readings from the instrument's non-volatile buffer memory. Use this function to recover readings saved in the instrument's buffer after a power cycle, off-line operation, or client application software malfunction.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        ///   (1) Use KE2400_GetBufferInfo, KE2400_Reconnect, and KE2400_Disconnect to query, attach, and detach the instrument's buffer.
        /// 
        /// (2) This is a low-level, special purpose function for use with KE2400_GetBufferInfo, KE2400_FetchBufferData, and KE2400_Disconnect to read the contents of the instrument's buffer after a power cycle or when the client application is trying to recover data after a software malfunction.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Reading_Format">
        /// This sets buffer elements returned for each reading. The driver sets the KE2400_ATTR_BUF_ELEMENTS attribute to this value.
        /// 
        /// Valid Values: Bitwise OR operation of the following constants: 
        /// 
        ///     KE2400_VAL_ELEMENT_READING - buffer reading value
        ///     KE2400_VAL_ELEMENT_TIME    - reading timestamp
        ///     KE2400_VAL_ELEMENT_STATUS  - instrument status
        /// 
        /// Notes:
        /// 
        /// (1) Each buffer element returned for a reading has a variable size. 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Pass the maximum length of time in which to allow the multi-point fetch operation to complete.  Express this value in milliseconds.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the KE2400_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call KE2400_Abort to cancel the multi-point fetch operation and return the instrument to the Idle state.  
        /// 
        /// Defined Values:
        /// KE2400_VAL_MAX_TIME_INFINITE (-1)           KE2400_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter affects only this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Array_Size">
        /// Pass the number of elements in the Reading Array parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Reading_Array">
        /// Returns an array of the most recent measurement values.  The value you specify for the Measurement Function parameter of the KE2400_ConfigureMeasurement function determines the units of this parameter as shown in the following table.
        /// 
        ///   DC Volts           - volts
        ///   DC Current         - amperes
        ///   Resistance         - ohms
        /// 
        /// Notes:
        /// 
        /// (1) The size of the Reading Array must be at least the size you specify for the Array Size parameter.
        /// 
        /// (2) If an over-range condition occurs, the corresponding Reading Array element contains an IEEE defined NaN (Not a Number) value and the function returns KE2400_WARN_OVER_RANGE. 
        /// 
        /// (3) You can test each element in the Reading Array parameter for over-range with the KE2400_IsOverRange function.
        /// </param>
        /// <param name="Actual_Number_of_Points">
        /// Indicates the number of measured values the function places in the Reading Array parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///    None. 
        /// 
        /// ERRORS:
        ///    None. 
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int FetchBufferData(int Reading_Format, int Maximum_Time__ms_, int Array_Size, double[] Reading_Array, out int Actual_Number_of_Points)
        {
            int pInvokeResult = PInvoke.FetchBufferData(this._handle, Reading_Format, Maximum_Time__ms_, Array_Size, Reading_Array, out Actual_Number_of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Use this function to close an instrument previously opened with KE2400_Reconnect.
        /// 
        /// This function performs the following operations:
        /// 
        /// - Closes the instrument I/O session.
        /// 
        /// - Destroys the instrument driver session and all of its attributes.
        /// 
        /// - Deallocates any memory resources the driver uses.
        /// 
        /// This function is a Keithley extension to the IviDMM class.
        /// 
        /// Notes:
        /// 
        /// (1) You must unlock the session before calling KE2400_Disconnect.
        /// 
        /// (2) After calling KE2400_Disconnect, you cannot use the instrument driver again until you call KE2400_Reconnect, KE2400_init or KE2400_InitWithOptions.
        /// 
        /// (3) This is a low-level, special purpose function for use with KE2400_GetBufferInfo, KE2400_FetchBufferData, and KE2400_Disconnect to read the contents of the instrument's buffer after a power cycle or when the client application is trying to recover data after a software malfunction.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The ViSession handle that you obtain from the KE2400_init or KE2400_InitWithOptions function.  The handle identifies a particular instrument session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the KE2400_error_message function.  To obtain additional information about the error condition, call the KE2400_GetErrorInfo function.  To clear the error information from the driver, call the KE2400_ClearErrorInfo function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        ///    None.
        /// 
        /// ERRORS:
        ///    None.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDmm  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDmm Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int Disconnect()
        {
            int pInvokeResult = PInvoke.Disconnect(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calculates the number of steps between specified start and stop levels (inclusive), given a step size. Applications can pass the result to the KE2400_ConfigureSourceRamp() function. 
        /// 
        /// Note: This function rounds the result of a whole number of steps. In cases where the difference of Start and Stop is not a multiple of StepSize, be sure to pass the actual desired start and stop levels to KE2400_ConfigureSourceRamp().
        /// 
        /// </summary>
        /// <param name="Start">
        /// Pass the start level of the ramp. See KE2400_ConfigureSourceRamp() for more information.
        /// 
        /// </param>
        /// <param name="Stop">
        /// Pass the stop level of the ramp. See KE2400_ConfigureSourceRamp() for more information.
        /// 
        /// </param>
        /// <param name="StepSize">
        /// Pass the step height of the ramp. (The signs of step height and difference between Stop and Start are ignored.)
        /// </param>
        public static int StepCount(double Start, double Stop, double StepSize)
        {
            int pInvokeResult = PInvoke.StepCount(Start, Stop, StepSize);
            PInvoke.TestForError(System.IntPtr.Zero, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = System.IntPtr.Zero;
            }
            this._disposed = true;
        }

        public void SetInt32(ke2400Properties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(ke2400Properties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public int GetInt32(ke2400Properties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(ke2400Properties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public void SetDouble(ke2400Properties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(ke2400Properties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public double GetDouble(ke2400Properties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(ke2400Properties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public void SetBoolean(ke2400Properties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(ke2400Properties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        public bool GetBoolean(ke2400Properties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(ke2400Properties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetString(ke2400Properties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(ke2400Properties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public string GetString(ke2400Properties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(ke2400Properties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public void SetSession(ke2400Properties propertyId, string repeatedCapabilityOrChannel, System.IntPtr val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViSession(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetSession(ke2400Properties propertyId, System.IntPtr val)
        {
            this.SetSession(propertyId, "", val);
        }

        public System.IntPtr GetSession(ke2400Properties propertyId, string repeatedCapabilityOrChannel)
        {
            System.IntPtr val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViSession(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public System.IntPtr GetSession(ke2400Properties propertyId)
        {
            return this.GetSession(propertyId, "");
        }

        private class PInvoke
        {

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasurement(System.IntPtr Instrument_Handle, int Measurement_Function, double Range, double Resolution__absolute_);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureApertureTimeInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureApertureTimeInfo(System.IntPtr Instrument_Handle, double Aperture_Time, int Aperture_Time_Unit);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureDCVSense", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDCVSense(System.IntPtr Instrument_Handle, double Range, double NPLC, ushort Guard, ushort External_Feedback, ushort Autorange);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureDCISense", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDCISense(System.IntPtr Instrument_Handle, double Range, double NPLC, ushort Autorange, ushort Damping);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureRESSense", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRESSense(System.IntPtr Instrument_Handle, double Range, double NPLC, ushort Guard, ushort Autorange);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_DC_IV", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_DC_IV(System.IntPtr Instrument_Handle, double Source_Range, double Source_Compliance, double Source_Level, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_DC_VI", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_DC_VI(System.IntPtr Instrument_Handle, double Source_Range, double Source_Compliance, double Source_Protection, double Source_Level, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_Sweep_IV", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_Sweep_IV(System.IntPtr Instrument_Handle, int Ranging, int Spacing, int Direction, double Source_Compliance, double Start, double Stop, int Number_of_Points, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_Sweep_VI", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_Sweep_VI(System.IntPtr Instrument_Handle, int Ranging, int Spacing, int Direction, double Source_Compliance, double Source_Protection, double Start, double Stop, int Number_of_Points, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_List_IV", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_List_IV(System.IntPtr Instrument_Handle, int Number_Of_Points, double[] Values, double Source_Compliance, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Configure_List_VI", CallingConvention = CallingConvention.StdCall)]
            public static extern int Configure_List_VI(System.IntPtr Instrument_Handle, int Number_Of_Points, double[] Values, double Source_Compliance, double Source_Protection, double Sense_Range, double Speed);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTrigger(System.IntPtr Instrument_Handle, int Trigger_Source, double Trigger_Delay__sec_);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSlope(System.IntPtr Instrument_Handle, int Trigger_Slope);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceTrigger(System.IntPtr Instrument_Handle, int Trigger_Source, double Trigger_Delay__sec_);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureArmLayer", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArmLayer(System.IntPtr Instrument_Handle, int Count, int Trigger_Source, double Timer, int Trigger_Bypass, int Trigger_Link_Input_Line, int Trigger_Link_Output_Line, int Trigger_Output);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureTriggerLayer", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerLayer(System.IntPtr Instrument_Handle, int Count, int Trigger_Source, double Delay, int Trigger_Bypass, int Trigger_Link_Input_Line, int Trigger_Link_Output_Line, int Trigger_Output);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureBuffer", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureBuffer(System.IntPtr Instrument_Handle, int Data_Elements, int Data_Format, int Buffer_Size, int Timestamp_Format);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ClearBuffer", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearBuffer(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_EnableBuffer", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableBuffer(System.IntPtr Instrument_Handle, ushort Enable_Buffer);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMultiPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMultiPoint(System.IntPtr Instrument_Handle, int Trigger_Count, int Sample_Count, int Sample_Trigger, double Sample_Interval__sec_);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMeasCompleteDest", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasCompleteDest(System.IntPtr Instrument_Handle, int Meas_Complete_Destination);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureStatistics", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureStatistics(System.IntPtr Instrument_Handle, int Function);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureAutoZeroMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoZeroMode(System.IntPtr Instrument_Handle, int Auto_Zero_Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigurePowerLineFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerLineFrequency(System.IntPtr Instrument_Handle, double PowerLine_Frequency);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFilter(System.IntPtr Instrument_Handle, int Filter_Type, int Count, double Window, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMedianFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMedianFilter(System.IntPtr Instrument_Handle, int Rank, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureRelative", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRelative(System.IntPtr Instrument_Handle, double Reference, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureDO", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDO(System.IntPtr Instrument_Handle, int Level, double Time_Delay, int TTL4_Mode, ushort TTL4_Level);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMeasurementTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasurementTrigger(System.IntPtr Instrument_Handle, int Trigger_Source, double Trigger_Delay__sec_);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureAutoRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoRange(System.IntPtr Instrument_Handle, int Sense_Mode, int Source_Mode, double Initial_Soak_Time);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureAutoRangeLimits", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoRangeLimits(System.IntPtr Instrument_Handle, double Upper_Limit, double Lower_Limit);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureAutoRangeLimitsEx", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoRangeLimitsEx(System.IntPtr Instrument_Handle, int Measurement_Function, double Upper_Limit, double Lower_Limit);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMath", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMath(System.IntPtr Instrument_Handle, int Function, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMathExpression", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathExpression(System.IntPtr Instrument_Handle, string Expression);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMathMXB", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathMXB(System.IntPtr Instrument_Handle, double m_Scale_factor, double b_Offset);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureMathPercent", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathPercent(System.IntPtr Instrument_Handle, double Reference);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureLimitTest", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLimitTest(System.IntPtr Instrument_Handle, int Test_Index, double Upper_Limit, double Lower_Limit, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureContactCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureContactCheck(System.IntPtr Instrument_Handle, double Resistance_Range, double Timeout, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureComplianceTest", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureComplianceTest(System.IntPtr Instrument_Handle, int Fail_Condition, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureCompositeTest", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCompositeTest(System.IntPtr Instrument_Handle, int Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureContactCheckOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureContactCheckOutput(System.IntPtr Instrument_Handle, int Fail_Pattern, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureComplianceTestOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureComplianceTestOutput(System.IntPtr Instrument_Handle, int Fail_Pattern);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureLimitTestOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLimitTestOutput(System.IntPtr Instrument_Handle, int Test_Index, int Fail_High_Pattern, int Pass_Pattern, int Fail_Low_Pattern);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureCompositeTestOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCompositeTestOutput(System.IntPtr Instrument_Handle, int Pass_Pattern, int Fail_Pattern, int Output_Event, int Reset_Event);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAutoRangeValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutoRangeValue(System.IntPtr Instrument_Handle, out double Actual_Range);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetApertureTimeInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetApertureTimeInfo(System.IntPtr Instrument_Handle, out double Aperture_Time, out int Aperture_Time_Units);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SaveSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveSetup(System.IntPtr Instrument_Handle, int Setup_Number);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_RecallSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int RecallSetup(System.IntPtr Instrument_Handle, int Setup_Number);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SelectPowerOnSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectPowerOnSetup(System.IntPtr Instrument_Handle, int Setup_Number);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Spoll", CallingConvention = CallingConvention.StdCall)]
            public static extern int Spoll(System.IntPtr Instrument_Handle, out ushort Service_Request);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSRQEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSRQEvents(System.IntPtr Instrument_Handle, int condition);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_EnableSRQEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableSRQEvents(System.IntPtr Instrument_Handle, ushort Enable);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Read", CallingConvention = CallingConvention.StdCall)]
            public static extern int Read(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, out double Reading);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ReadMultiPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMultiPoint(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, int Array_Size, [In, Out] double[] Reading_Array, out int Actual_Number_of_Points);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ReadMultiPointChar", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMultiPointChar(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, int Array_Size, System.Text.StringBuilder Reading_Array, out int Actual_Number_of_Points);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_AcquireNewRelativeReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquireNewRelativeReference(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Initiate", CallingConvention = CallingConvention.StdCall)]
            public static extern int Initiate(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SendSoftwareTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendSoftwareTrigger(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Fetch", CallingConvention = CallingConvention.StdCall)]
            public static extern int Fetch(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, out double Reading);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_FetchMultiPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMultiPoint(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, int Array_Size, [In, Out] double[] Reading_Array, out int Actual_Number_of_Points);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_FetchMultiPointChar", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMultiPointChar(System.IntPtr Instrument_Handle, int Maximum_Time__ms_, int Array_Size, System.Text.StringBuilder Reading_Array, out int Actual_Number_of_Points);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Abort", CallingConvention = CallingConvention.StdCall)]
            public static extern int Abort(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_IsOverRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int IsOverRange(System.IntPtr Instrument_Handle, double Measurement_Value, out ushort Is_Over_Range);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_FetchStatistics", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchStatistics(System.IntPtr Instrument_Handle, int Max_Time__ms_, out double Data);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_FetchTestStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchTestStatus(System.IntPtr Instrument_Handle, int Test_Index, out int Test_Status);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceBias", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceBias(System.IntPtr Instrument_Handle, int Function, double Range, double Level, double Compliance_Limit, int Standby_Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceDC", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceDC(System.IntPtr Instrument_Handle, int Function, double Range, double Level, ushort Enable_Pulsing, double Compliance_Limit, int Standby_Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceRamp", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceRamp(System.IntPtr Instrument_Handle, int Function, double Range, int RampMode, double Start, double Stop, int Step_Count, ushort Enable_Pulsing, double Compliance_Limit, int Standby_Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceCustom", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceCustom(System.IntPtr Instrument_Handle, int Function, double Range, int LevelsArraySize, double[] Levels, ushort Enable_Pulsing, double Compliance_Limit, int Standby_Mode);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureSourceInterlock", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSourceInterlock(System.IntPtr Instrument_Handle, ushort Enabled);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ConfigureOverVoltageProtection", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOverVoltageProtection(System.IntPtr Instrument_Handle, double Limit);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_EnableSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableSource(System.IntPtr Instrument_Handle, int Generator, int Output_Action);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ControlSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ControlSource(System.IntPtr Instrument_Handle, int Output_State);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ProgramClear", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProgramClear(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ProgramSaveStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProgramSaveStep(System.IntPtr Instrument_Handle, int Location);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ProgramBranch", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProgramBranch(System.IntPtr Instrument_Handle, int Test_Type, int Location_On_Pass, int Location_On_Fail);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ProgramRecallStep", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProgramRecallStep(System.IntPtr Instrument_Handle, int Location);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ProgramInitiate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ProgramInitiate(System.IntPtr Instrument_Handle, int Start_Location);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.IntPtr Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.IntPtr Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.IntPtr Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_InvalidateAllAttributes", CallingConvention = CallingConvention.StdCall)]
            public static extern int InvalidateAllAttributes(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_PlayTone", CallingConvention = CallingConvention.StdCall)]
            public static extern int PlayTone(System.IntPtr Instrument_Handle, double Frequency, double Duration);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ClearErrorInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearErrorInfo(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_WriteInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteInstrData(System.IntPtr Instrument_Handle, string Write_Buffer);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_ReadInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadInstrData(System.IntPtr Instrument_Handle, int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Reconnect", CallingConvention = CallingConvention.StdCall)]
            public static extern int Reconnect(string Resource_Name, out System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetBufferInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetBufferInfo(System.IntPtr Instrument_Handle, out int Timestamp_Type, out int Sample_Count);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_FetchBufferData", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchBufferData(System.IntPtr Instrument_Handle, int Reading_Format, int Maximum_Time__ms_, int Array_Size, [In, Out] double[] Reading_Array, out int Actual_Number_of_Points);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_Disconnect", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disconnect(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_StepCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int StepCount(double Start, double Stop, double StepSize);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.IntPtr Instrument_Handle);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.IntPtr Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, int Buffer_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, out System.IntPtr Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, int Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, double Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, string Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.IntPtr Instrument_Handle, string Channel_Name, int Attribute_ID, System.IntPtr Attribute_Value);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.IntPtr Instrument_Handle, out int Code, int BufferSize, System.Text.StringBuilder Description);

            [DllImport("KE2400_32.dll", EntryPoint = "KE2400_GetErrorInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetErrorInfo(System.IntPtr Instrument_Handle, out int Primary_Error, out int Secondary_Error, System.Text.StringBuilder Error_Elaboration);


            public static int TestForError(System.IntPtr handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.IntPtr handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class ke2400Constants
    {

        public const int DcVolts = 1;

        public const int DcCurrent = 3;

        public const int _2WireRes = 5;

        public const int _4WireRes = 101;

        public const int _2WireResOffsetComp = 1001;

        public const int _4WireResOffsetComp = 1002;

        public const double RateFast = -1;

        public const double RateMedium = -2;

        public const double RateNormal = -4;

        public const double RateHiAccuracy = -3;

        public const int PowerLineCycles = 1;

        public const double AutoRangeOn = -1;

        public const int Linear = 0;

        public const int Log = 1;

        public const int SweepDirUp = 0;

        public const int SweepDirDown = 1;

        public const int SweepRangeBest = 0;

        public const int SweepRangeAuto = 1;

        public const int SweepRangeFixed = 2;

        public const int Immediate = 1;

        public const int External = 2;

        public const int SoftwareTrig = 3;

        public const int Timer = 1013;

        public const int Manual = 1007;

        public const int Tlink1 = 1001;

        public const int Tlink2 = 1002;

        public const int Tlink3 = 1003;

        public const int Tlink4 = 1004;

        public const int Positive = 0;

        public const int Negative = 1;

        public const int Tlink = 1008;

        public const int Pstest = 1009;

        public const int Nstest = 1010;

        public const int Bstest = 1012;

        public const int BypassOnce = 1;

        public const int BypassNever = 2;

        public const int OutputEnabled = 1;

        public const int OutputDisabled = 0;

        public const int TimestampAbs = 0;

        public const int TimestampDelta = 1;

        public const int TimestampManual = 2;

        public const int ElementReading = 1;

        public const int ElementVoltage = 262144;

        public const int ElementCurrent = 131072;

        public const int ElementResistance = 65536;

        public const int FormatAscii = 0;

        public const int FormatSingle = 1;

        public const int FormatSingle32 = 2;

        public const int None = -1;

        public const int StatsMean = 0;

        public const int StatsSdev = 3;

        public const int StatsMin = 1;

        public const int StatsMax = 2;

        public const int StatsPk2pk = 4;

        public const int AutoZeroOn = 1;

        public const int AutoZeroOff = 0;

        public const int AutoZeroOnce = 2;

        public const int FilterMoving = 1;

        public const int FilterRepeating = 0;

        public const int Ttl4ModeEot = 1;

        public const int Ttl4ModeBusy = 2;

        public const int Ttl4ModeDo = 0;

        public const int RcmSingle = 0;

        public const int RcmMultiple = 1;

        public const int MathReciprocal = 1;

        public const int MathMxb = 2;

        public const int MathPercent = 3;

        public const int MathLog10 = 4;

        public const int MathExpression = 0;

        public const int MathPower = 5;

        public const int MathOffsetCompensatedOhms = 6;

        public const int MathResistorVoltageCoefficient = 7;

        public const int MathVaristorAlpha = 8;

        public const int In = 0;

        public const int Out = 1;

        public const int Grading = 2;

        public const int Sorting = 3;

        public const int EventMeasurementComplete = 2048;

        public const int EventLoopExited = 4096;

        public const int EventNone = 0;

        public const int EventInitiate = 1;

        public const int Setup0 = 0;

        public const int Setup1 = 1;

        public const int Setup2 = 2;

        public const int SetupPreset = -1;

        public const int SetupReset = -2;

        public const int StandbyOff = 1;

        public const int StandbyLast = 2;

        public const int StandbyHighImpedance = 3;

        public const int StandbyNormal = 4;

        public const int StandbyZero = 5;

        public const int StandbyGuard = 6;

        public const int ImmediateOn = 1;

        public const int ImmediateOff = 2;

        public const int ImmediateStandby = 4;

        public const int AutoSyncEnabled = 65536;

        public const int AutoSyncDisabled = 131072;

        public const int SourceBias = 1;

        public const int SourceCustom = 8;

        public const int SourceDc = 2;

        public const int SourceRamp = 4;

        public const int TestComposite = 0;

        public const double _4_0 = 4;

        public const double _5_0 = 5;

        public const double _6_0 = 6;

        public const double _7_0 = 7;

        public const int PositiveOrNegative = 1001;

        public const double _50_0 = 50;

        public const double _60_0 = 60;

        public const int ElementCalc1 = 8192;

        public const int ElementSense = 4096;

        public const int ElementCalc2 = 16384;

        public const int FeedControlNever = 0;

        public const int FeedControlNext = 1;

        public const int BigEndian = 0;

        public const int LittleEndian = 1;

        public const int InputFront = 0;

        public const int InputRear = 1;

        public const int Setup3 = 3;

        public const int Setup4 = 4;

        public const int Model2400 = 0;

        public const int Model2410 = 1;

        public const int Model2420 = 2;

        public const int Model2425 = 3;

        public const int Model2430 = 4;

        public const int Model2440 = 5;

        public const int Model6430 = 6;

        public const int SourceNoAction = 0;

        public const int Decimal = 10;

        public const int Hexadecimal = 16;

        public const int Octal = 8;

        public const int Binary = 2;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementResistance_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementResistance_ke2400ValElementTime = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementResistance_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementResistance = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementTime = 0;

        public const int ElementVoltage_ke2400ValElementCurrent_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementCurrent = 0;

        public const int ElementVoltage_ke2400ValElementResistance_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementResistance_ke2400ValElementTime = 0;

        public const int ElementVoltage_ke2400ValElementResistance_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementResistance = 0;

        public const int ElementVoltage_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementVoltage_ke2400ValElementTime = 0;

        public const int ElementVoltage_ke2400ValElementStatus = 0;

        public const int ElementCurrent_ke2400ValElementResistance_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementCurrent_ke2400ValElementResistance_ke2400ValElementTime = 0;

        public const int ElementCurrent_ke2400ValElementResistance_ke2400ValElementStatus = 0;

        public const int ElementCurrent_ke2400ValElementResistance = 0;

        public const int ElementCurrent_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementCurrent_ke2400ValElementTime = 0;

        public const int ElementCurrent_ke2400ValElementStatus = 0;

        public const int ElementResistance_ke2400ValElementTime_ke2400ValElementStatus = 0;

        public const int ElementResistance_ke2400ValElementTime = 0;

        public const int ElementResistance_ke2400ValElementStatus = 0;

        public const int ElementTime_ke2400ValElementStatus = 96;

        public const int ElementCalc_ke2400ValElementTime_ke2400ValElementStatus = 1120;

        public const int ElementCalc_ke2400ValElementTime = 1056;

        public const int ElementCalc_ke2400ValElementStatus = 1024;

        public const int ElementCalc = 32768;

        public const int ElementTime = 8;

        public const int ElementStatus = 64;

        public const int ScpiSenseCurrent_ke2400ValScpiSenseVoltage_ke2400ValScpiSenseResistance = 7;

        public const int ScpiSenseCurrent_ke2400ValScpiSenseVoltage = 3;

        public const int ScpiSenseCurrent_ke2400ValScpiSenseResistance = 5;

        public const int ScpiSenseCurrent = 1;

        public const int ScpiSenseVoltage_ke2400ValScpiSenseResistance = 6;

        public const int ScpiSenseVoltage = 2;

        public const int ScpiSenseResistance = 4;

        public const int ManualResMode = 0;

        public const int AutoResMode = 1;

        public const int FunctionShapeDc = 0;

        public const int FunctionShapePulse = 1;

        public const int SourceFunctionModeVoltage = 0;

        public const int SourceFunctionModeCurrent = 1;

        public const int SourceFunctionModeMemory = 2;

        public const int SourceModeFixed = 0;

        public const int SourceModeSweep = 1;

        public const int SourceModeList = 2;

        public const int False = 0;

        public const int True = 1;

        public const double _2_0 = 2;

        public const double _15_0 = 15;

        public const int EventWaitSource = 8;

        public const int EventWaitSample = 128;

        public const int EventWaitMeasurement = 1024;

        public const int EventWaitSource_ke2400ValEventWaitSample = 136;

        public const int EventWaitSource_ke2400ValEventWaitMeasurement = 1032;

        public const int EventWaitSample_ke2400ValEventWaitMeasurement = 1152;

        public const int EventWaitSource_ke2400ValEventWaitSample_ke2400ValEventWaitMeasurement = 1160;

        public const int EventSourceActionComplete = 64;

        public const int EventSampleDelayComplete = 512;

        public const int EventSourceActionComplete_ke2400ValEventSampleDelayComplete = 576;

        public const int EventSourceActionComplete_ke2400ValEventMeasurementComplete = 2112;

        public const int EventSampleDelayComplete_ke2400ValEventMeasurementComplete = 2560;

        public const int EventSourceActionComplete_ke2400ValEventSampleDelayComplete_ke2400ValEventMeasurementComplete = 2624;

        public const int ContactCheck = 1024;

        public const int EventLoopEntered = 4;

        public const int EventLoopEntered_ke2400ValEventLoopExited = 4100;
    }

    public enum ke2400Properties
    {

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverLocator = 1050303,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverMajorVersion = 1050503,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverMinorVersion = 1050504,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedClasses = 1050323,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumChannels = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.Int32
        /// </summary>
        PrimaryError = 1050101,

        /// <summary>
        /// System.Int32
        /// </summary>
        SecondaryError = 1050102,

        /// <summary>
        /// System.String
        /// </summary>
        ErrorElaboration = 1050103,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.String
        /// </summary>
        IoSessionType = 1050324,

        /// <summary>
        /// System.IntPtr
        /// </summary>
        IoSession = 1050322,

        /// <summary>
        /// System.Int32
        /// </summary>
        Function = 1250001,

        /// <summary>
        /// System.Double
        /// </summary>
        Range = 1250002,

        /// <summary>
        /// System.Double
        /// </summary>
        Resolution = 1150115,

        /// <summary>
        /// System.Double
        /// </summary>
        AutoRangeUlimit = 1150003,

        /// <summary>
        /// System.Double
        /// </summary>
        AutoRangeLlimit = 1150004,

        /// <summary>
        /// System.Double
        /// </summary>
        ResolutionAbsolute = 1250008,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DciRangeAutoEnabled = 1150246,

        /// <summary>
        /// System.Double
        /// </summary>
        DciRange = 1150235,

        /// <summary>
        /// System.Double
        /// </summary>
        DcvRange = 1150234,

        /// <summary>
        /// System.Double
        /// </summary>
        DciAutoRangeUlimit = 1150240,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ResRangeAutoEnabled = 1150247,

        /// <summary>
        /// System.Double
        /// </summary>
        DcvAutoRangeLlimit = 1150242,

        /// <summary>
        /// System.Double
        /// </summary>
        DcvAutoRangeUlimit = 1150239,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DcvRangeAutoEnabled = 1150245,

        /// <summary>
        /// System.Double
        /// </summary>
        ResAutoRangeUlimit = 1150241,

        /// <summary>
        /// System.Double
        /// </summary>
        ResRange = 1150236,

        /// <summary>
        /// System.Double
        /// </summary>
        DciAutoRangeLlimit = 1150243,

        /// <summary>
        /// System.Double
        /// </summary>
        ResAutoRangeLlimit = 1150244,

        /// <summary>
        /// System.Double
        /// </summary>
        LastReading = 1150156,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerInterval = 1150005,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSlope = 1250334,

        /// <summary>
        /// System.Int32
        /// </summary>
        SourceTrigger = 1150255,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerDelay = 1250005,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSource = 1250004,

        /// <summary>
        /// System.Double
        /// </summary>
        SourceDelay = 1150250,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasurementTrigger = 1150256,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReadyForSoftwareTrigger = 1150008,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerClear = 1150007,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerCount = 1250304,

        /// <summary>
        /// System.Int32
        /// </summary>
        SampleTrigger = 1250302,

        /// <summary>
        /// System.Int32
        /// </summary>
        SampleCount = 1250301,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasCompleteDest = 1250305,

        /// <summary>
        /// System.Double
        /// </summary>
        SampleInterval = 1250303,

        /// <summary>
        /// System.Double
        /// </summary>
        ArmTimer = 1150006,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmSource = 1150091,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmIlin = 1150095,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmOutput = 1150097,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmTlinkBypass = 1150094,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmCount = 1150092,

        /// <summary>
        /// System.Int32
        /// </summary>
        ArmOlin = 1150096,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigCount = 1150127,

        /// <summary>
        /// System.Double
        /// </summary>
        TrigDelay = 1150126,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigSource = 1150125,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigTlinkBypass = 1150100,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TrigDelayAutoEnabled = 1150102,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigOutput = 1150101,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigOlin = 1150099,

        /// <summary>
        /// System.Int32
        /// </summary>
        TrigIlin = 1150098,

        /// <summary>
        /// System.Double
        /// </summary>
        ApertureTime = 1250321,

        /// <summary>
        /// System.Int32
        /// </summary>
        ApertureTimeUnits = 1250322,

        /// <summary>
        /// System.Double
        /// </summary>
        AutoRangeValue = 1250331,

        /// <summary>
        /// System.Double
        /// </summary>
        DcvApertureTime = 1150237,

        /// <summary>
        /// System.Double
        /// </summary>
        ResApertureTime = 1150238,

        /// <summary>
        /// System.Double
        /// </summary>
        DciApertureTime = 1150231,

        /// <summary>
        /// System.Int32
        /// </summary>
        AutoZero = 1250332,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerlineFreq = 1250333,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DcvExtFeedbackEnabled = 1150086,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DcvGuardEnabled = 1150085,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DciDampEnabled = 1150087,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ResGuardEnabled = 1150088,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FilterEnabled = 1150057,

        /// <summary>
        /// System.Int32
        /// </summary>
        FilterType = 1150058,

        /// <summary>
        /// System.Int32
        /// </summary>
        FilterCount = 1150059,

        /// <summary>
        /// System.Int32
        /// </summary>
        FilterCountActual = 1150225,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MedianFilterEnabled = 1150113,

        /// <summary>
        /// System.Int32
        /// </summary>
        MedianFilterRank = 1150114,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AdvancedFilterEnabled = 1150112,

        /// <summary>
        /// System.Double
        /// </summary>
        AdvancedFilterNtolerance = 1150111,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MathEnabled = 1150036,

        /// <summary>
        /// System.Int32
        /// </summary>
        MathFunction = 1150037,

        /// <summary>
        /// System.Double
        /// </summary>
        MxbMFactor = 1150039,

        /// <summary>
        /// System.Double
        /// </summary>
        MxbBOffset = 1150038,

        /// <summary>
        /// System.String
        /// </summary>
        MathExpression = 1150254,

        /// <summary>
        /// System.String
        /// </summary>
        MathUnits = 1150216,

        /// <summary>
        /// System.Double
        /// </summary>
        PercentReference = 1150040,

        /// <summary>
        /// System.Double
        /// </summary>
        LastMathResult = 1150157,

        /// <summary>
        /// System.Double
        /// </summary>
        RelativeReference = 1150032,

        /// <summary>
        /// System.Int32
        /// </summary>
        RelativeDataSource = 1150249,

        /// <summary>
        /// System.Double
        /// </summary>
        LastRelativeResult = 1150158,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RelativeEnabled = 1150031,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufStatisticsFormat = 1150061,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufElements = 1150002,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufTimestampForm = 1150076,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufTimestampReset = 1150154,

        /// <summary>
        /// System.Double
        /// </summary>
        BufTimestamp = 1150264,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufClear = 1150195,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufFreeBytes = 1150075,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufInuseCount = 1150228,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufDataSource = 1150049,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufDataControl = 1150050,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufDataFormat = 1150033,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufSize = 1150034,

        /// <summary>
        /// System.Int32
        /// </summary>
        BufByteOrder = 1150051,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalOutputClear = 1150048,

        /// <summary>
        /// System.Int32
        /// </summary>
        ClimitClear = 1150105,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalOutputLevelActual = 1150265,

        /// <summary>
        /// System.Int32
        /// </summary>
        DigitalOutputLevelDefault = 1150046,

        /// <summary>
        /// System.Int32
        /// </summary>
        Ttl4Mode = 1150045,

        /// <summary>
        /// System.Int32
        /// </summary>
        ClimitOutputPassPattern = 1150106,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DigitalOutputAutoEnabled = 1150047,

        /// <summary>
        /// System.Double
        /// </summary>
        DigitalOutputAutoDelay = 1150035,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Ttl4BusyLevel = 1150044,

        /// <summary>
        /// System.Double
        /// </summary>
        ContactCheckTimeout = 1150266,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SourceComplianceState = 1150261,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SourceInterlockTripped = 1150267,

        /// <summary>
        /// System.Int32
        /// </summary>
        ServiceRequestEnableRegister = 1150011,

        /// <summary>
        /// System.Int32
        /// </summary>
        StatusByteRegister = 1150009,

        /// <summary>
        /// System.Int32
        /// </summary>
        StandardEventRegister = 1150012,

        /// <summary>
        /// System.Int32
        /// </summary>
        StandardEventEnableRegister = 1150013,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ClearEventRegisters = 1150014,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ResetEnableRegisters = 1150015,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasurementEventEnableRegister = 1150016,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasurementEventRegister = 1150017,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasurementConditionRegister = 1150018,

        /// <summary>
        /// System.Int32
        /// </summary>
        OperationEventEnableRegister = 1150019,

        /// <summary>
        /// System.Int32
        /// </summary>
        OperationEventRegister = 1150020,

        /// <summary>
        /// System.Int32
        /// </summary>
        OperationConditionRegister = 1150010,

        /// <summary>
        /// System.Int32
        /// </summary>
        QuestionableEventEnableRegister = 1150021,

        /// <summary>
        /// System.Int32
        /// </summary>
        QuestionableEventRegister = 1150023,

        /// <summary>
        /// System.Int32
        /// </summary>
        QuestionableConditionRegister = 1150024,

        /// <summary>
        /// System.String
        /// </summary>
        EnabledErrors = 1150160,

        /// <summary>
        /// System.String
        /// </summary>
        DisabledErrors = 1150161,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ErrorQueueClear = 1150025,

        /// <summary>
        /// System.String
        /// </summary>
        ErrorQueueNext = 1150026,

        /// <summary>
        /// System.String
        /// </summary>
        ErrorQueueAll = 1150027,

        /// <summary>
        /// System.Int32
        /// </summary>
        ErrorCodeNext = 1150028,

        /// <summary>
        /// System.String
        /// </summary>
        ErrorCodeAll = 1150029,

        /// <summary>
        /// System.Int32
        /// </summary>
        ErrorQueueCount = 1150030,

        /// <summary>
        /// System.Int32
        /// </summary>
        SysInputSwitch = 1150262,

        /// <summary>
        /// System.Boolean
        /// </summary>
        FrontPanelLockout = 1150119,

        /// <summary>
        /// System.Int32
        /// </summary>
        KeyPress = 1150074,

        /// <summary>
        /// System.String
        /// </summary>
        SysScpiVersion = 1150073,

        /// <summary>
        /// System.String
        /// </summary>
        DisplayMessage = 1150078,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MessageEnabled = 1150077,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DisplayEnabled = 1150055,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentOptions = 1150155,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerlineFreqAutoEnabled = 1150159,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerlineCycles = 1150248,

        /// <summary>
        /// System.Boolean
        /// </summary>
        BeeperEnabled = 1150263,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetupRecallPreset = 1150162,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerOnSetup = 1150041,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetupRecall = 1150042,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetupSave = 1150043,

        /// <summary>
        /// System.String
        /// </summary>
        IdQueryResponse = 1150001,

        /// <summary>
        /// System.Int32
        /// </summary>
        TonePlay = 1150253,

        /// <summary>
        /// System.Double
        /// </summary>
        ToneDuration = 1150252,

        /// <summary>
        /// System.Double
        /// </summary>
        ToneFrequency = 1150251,
    }
}
